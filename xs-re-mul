#!/bin/bash
# ---------------------------------------------------------------------
# Citrix XenServer / Hypervisor Multi-Pool SSH Collector (Pool-wise v2.0)
# ---------------------------------------------------------------------
# ✅ Runs from admin/jump server only
# ✅ No remote file copy – executes inline via SSH
# ✅ Collects and saves each pool report separately by pool name
# ✅ Also creates a master index CSV listing all pools collected
# ---------------------------------------------------------------------

USER="root"                   # SSH username
PASS="YourPasswordHere"       # SSH password (ignored if using key)
SERVER_LIST="./servers.txt"   # File containing XenServer pool masters
SSH_TIMEOUT=15
USE_SSH_KEY=false             # true = SSH key auth, false = password
TMP_DIR="/tmp/xenpool_collect_tmp"
DATESTAMP=$(date +%Y-%m-%d_%H-%M)
MASTER_INDEX="/tmp/xenpool_index_${DATESTAMP}.csv"

mkdir -p "$TMP_DIR"
> "$MASTER_INDEX"

[[ ! -f "$SERVER_LIST" ]] && { echo "Error: $SERVER_LIST not found!"; exit 1; }

echo "=============================================================="
echo " Citrix XenServer Multi-Pool Resource Collector (Pool-wise v2.0)"
echo "=============================================================="
echo "Using server list: $SERVER_LIST"
echo "All pool reports and index saved under: $TMP_DIR"
echo "=============================================================="

# --- Embedded Remote Script (runs in XenServer memory) ---
read -r -d '' REMOTE_SCRIPT <<'EOF'
#!/bin/bash
timestamp=$(date +"%Y-%m-%d_%H-%M")
csv_file="/tmp/xenpool_summary_${timestamp}.csv"

pool_name=$(xe pool-list | grep "name-label ( RW):" | awk '{print $4}')
[[ -z "$pool_name" ]] && pool_name="Standalone_Host"

total_cpu=0
total_mem_total=0
total_mem_usable=0
total_mem_used=0
total_mem_free=0
total_ctrl_mem=0
total_vms=0

hosts=$(xe host-list --minimal | tr ',' ' ')
[[ -z "$hosts" ]] && { echo "No hosts found."; exit 1; }

echo "POOL NAME,HOST NAME,CPU,CTRL_MEM(GB),USED(GB),FREE(GB),TOTAL(GB),RUNNING_VM" > "$csv_file"

for uuid in $hosts; do
  host_name=$(xe host-param-get uuid="$uuid" param-name=name-label)
  cpu=$(xe host-cpu-info host-uuid="$uuid" --minimal)
  [[ -z "$cpu" ]] && cpu=0

  mem_total_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-total)
  mem_free_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-free)
  ctrl_mem_mib=$(xl list Domain-0 2>/dev/null | awk 'NR==2 {print $3}')
  [[ -z "$ctrl_mem_mib" ]] && ctrl_mem_mib=0
  ctrl_mem_bytes=$((ctrl_mem_mib * 1024 * 1024))

  mem_total_gb=$((mem_total_bytes/1024/1024/1024))
  mem_free_gb=$((mem_free_bytes/1024/1024/1024))
  ctrl_mem_gb=$((ctrl_mem_bytes/1024/1024/1024))

  mem_used_gb=$((mem_total_gb - mem_free_gb))
  usable_mem_gb=$((mem_total_gb - ctrl_mem_gb))
  [[ $mem_used_gb -lt 0 ]] && mem_used_gb=0

  vm_count=$(xe vm-list resident-on="$uuid" power-state=running \
    | grep "name-label" | grep -vi "Control" | awk '{print $NF}' | sort | wc -l)

  echo "$pool_name,$host_name,$cpu,$ctrl_mem_gb,$mem_used_gb,$mem_free_gb,$usable_mem_gb,$vm_count" >> "$csv_file"

  total_cpu=$((total_cpu + cpu))
  total_mem_total=$((total_mem_total + mem_total_gb))
  total_mem_usable=$((total_mem_usable + usable_mem_gb))
  total_mem_used=$((total_mem_used + mem_used_gb))
  total_mem_free=$((total_mem_free + mem_free_gb))
  total_ctrl_mem=$((total_ctrl_mem + ctrl_mem_gb))
  total_vms=$((total_vms + vm_count))
done

usable_mem_pool=$((total_mem_usable - total_ctrl_mem))
total_16gb_vm_cap=$((usable_mem_pool / 16))

{
  echo ""
  echo "POOL SUMMARY"
  echo "Total Running VMs,$total_vms"
  echo "Usable Memory (GB),$usable_mem_pool"
  echo "16GB VM Capacity (Approx),$total_16gb_vm_cap"
} >> "$csv_file"

echo "$pool_name,$csv_file"
EOF

# --- Collect from all servers ---
for server in $(grep -v '^#' "$SERVER_LIST" | xargs); do
  echo "------------------------------------------------------------------"
  echo "🔗 Connecting to $server ..."

  if [[ "$USE_SSH_KEY" == true ]]; then
    result=$(ssh -o ConnectTimeout=$SSH_TIMEOUT $USER@$server "bash -s" <<< "$REMOTE_SCRIPT" 2>/dev/null)
  else
    result=$(sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT $USER@$server "bash -s" <<< "$REMOTE_SCRIPT" 2>/dev/null)
  fi

  pool_name=$(echo "$result" | awk -F',' '{print $1}')
  remote_csv=$(echo "$result" | awk -F',' '{print $2}')

  if [[ -z "$pool_name" || -z "$remote_csv" ]]; then
    echo "⚠ Failed to collect data from $server"
    continue
  fi

  clean_pool=$(echo "$pool_name" | tr -dc 'A-Za-z0-9_-')
  local_csv="${TMP_DIR}/${clean_pool}_${DATESTAMP}.csv"

  echo "⬇️ Fetching pool [$pool_name] CSV from $server ..."
  if [[ "$USE_SSH_KEY" == true ]]; then
    scp -o ConnectTimeout=$SSH_TIMEOUT $USER@$server:"$remote_csv" "$local_csv" >/dev/null 2>&1
  else
    sshpass -p "$PASS" scp -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT $USER@$server:"$remote_csv" "$local_csv" >/dev/null 2>&1
  fi

  if [[ -f "$local_csv" ]]; then
    echo "✔ Pool [$pool_name] data saved to: $local_csv"
    echo "$pool_name,$server,$local_csv" >> "$MASTER_INDEX"
  else
    echo "⚠ Failed to retrieve CSV from $server"
  fi
done

echo "------------------------------------------------------------------"
echo "✅ All Pool Data Collected Successfully!"
echo "📘 Master Index File: $MASTER_INDEX"
echo "------------------------------------------------------------------"
