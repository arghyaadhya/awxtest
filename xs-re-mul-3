#!/usr/bin/env bash
#
# Citrix XenServer / Hypervisor Multi-Pool SSH Collector (production-ready)
# Version: 2.8 (2025-10-14)
#
# âœ… Collects detailed pool CSV data (CPU, Memory, SR, VM, Hyperthreading)
# âœ… Generates per-pool CSVs in /tmp/xenpool_collect_tmp
# âœ… Verifies file transfers and cleans up remote files
# âœ… Creates master index CSV for each run
# âœ… NEW: Maintains index_filelist.txt (sorted list of all past index files)
#

set -euo pipefail

# ---------- Config ----------
USER="${USER:-root}"
SERVER_LIST="${SERVER_LIST:-./servers.txt}"
SSH_TIMEOUT="${SSH_TIMEOUT:-15}"
USE_SSH_KEY="${USE_SSH_KEY:-false}"
TMP_DIR="${TMP_DIR:-/tmp/xenpool_collect_tmp}"
DATESTAMP="$(date +%Y-%m-%d_%H-%M)"
MASTER_INDEX="${MASTER_INDEX:-${TMP_DIR}/xenpool_index_${DATESTAMP}.csv}"
SSH_BIN="ssh"
SCP_BIN="scp"
SSHPASS_BIN="$(command -v sshpass || true)"
INDEX_FILELIST="${TMP_DIR}/index_filelist.txt"

mkdir -p "$TMP_DIR"
: > "$MASTER_INDEX"

if [[ ! -f "$SERVER_LIST" ]]; then
  echo "Error: Server list not found: $SERVER_LIST" >&2
  exit 1
fi

if [[ "$USE_SSH_KEY" != "true" ]]; then
  if [[ -z "${PASS:-}" ]]; then
    echo "Error: PASS variable not set and USE_SSH_KEY=false." >&2
    exit 1
  fi
  if [[ -z "$SSHPASS_BIN" ]]; then
    echo "Error: sshpass not installed." >&2
    exit 1
  fi
fi

echo "=============================================================="
echo " Citrix XenServer Multi-Pool SSH Collector (v2.8)"
echo "=============================================================="
echo "Start Time : $(date '+%Y-%m-%d %H:%M:%S')"
echo "Server List: $SERVER_LIST"
echo "Output Dir : $TMP_DIR"
echo "=============================================================="

# ---------- Remote Script ----------
read -r -d '' REMOTE_SCRIPT <<'EOF'
#!/bin/bash
set -euo pipefail

timestamp=$(date +%Y-%m-%d_%H-%M)
csv_file="/tmp/xenpool_summary_${timestamp}.csv"

pool_name=$(xe pool-list 2>/dev/null | awk -F': ' '/name-label/ {print $2; exit}')
[[ -z "$pool_name" ]] && pool_name="Standalone_Host"

total_cpu=0
total_mem_total=0
total_mem_usable=0
total_mem_used=0
total_mem_free=0
total_ctrl_mem=0
total_vms=0
total_32gb_vms=0
total_16_abcvde_vms=0
total_16_abcvder_vms=0

hosts=$(xe host-list --minimal 2>/dev/null | tr ',' ' ')
[[ -z "$hosts" ]] && { echo "No hosts found"; exit 1; }

echo "POOL NAME,HOST NAME,CPU,CTRL_MEM(GB),USED(GB),FREE(GB),TOTAL(GB),HYPERTHREADING,RUNNING_VM,VM_32GB_COUNT,VM_16GB_ABCvDE_COUNT,VM_16GB_ABCvDER_COUNT" > "$csv_file"

for uuid in $hosts; do
  host_name=$(xe host-param-get uuid="$uuid" param-name=name-label)
  cpu=$(xe host-cpu-info host-uuid="$uuid" --minimal || echo 0)

  ht_status="UNKNOWN"
  if [[ -r /sys/devices/system/cpu/smt/active ]]; then
    ht_val=$(cat /sys/devices/system/cpu/smt/active)
    if [[ "$ht_val" == "1" ]]; then
      ht_status="ON"
    elif [[ "$ht_val" == "0" ]]; then
      ht_status="OFF"
    fi
  fi

  mem_total_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-total)
  mem_free_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-free)
  ctrl_mem_mib=$(xl list Domain-0 2>/dev/null | awk 'NR==2 {print $3}' || echo 0)
  ctrl_mem_bytes=$((ctrl_mem_mib * 1024 * 1024))

  mem_total_gb=$((mem_total_bytes/1024/1024/1024))
  mem_free_gb=$((mem_free_bytes/1024/1024/1024))
  ctrl_mem_gb=$((ctrl_mem_bytes/1024/1024/1024))
  mem_used_gb=$((mem_total_gb - mem_free_gb))
  usable_mem_gb=$((mem_total_gb - ctrl_mem_gb))
  [[ $mem_used_gb -lt 0 ]] && mem_used_gb=0

  vm_count=$(xe vm-list resident-on="$uuid" power-state=running | grep -i name-label | grep -vi control | wc -l)

  vm_32gb_count=0
  vm_16_abcvde_count=0
  vm_16_abcvder_count=0

  for vm_uuid in $(xe vm-list resident-on="$uuid" power-state=running --minimal | tr ',' ' '); do
    mem_bytes=$(xe vm-param-get uuid="$vm_uuid" param-name=memory-static-max)
    vm_name=$(xe vm-param-get uuid="$vm_uuid" param-name=name-label)
    mem_gb=$((mem_bytes/1024/1024/1024))

    if [[ "$mem_gb" -eq 32 ]]; then
      ((vm_32gb_count++))
    elif [[ "$mem_gb" -eq 16 ]]; then
      if echo "$vm_name" | grep -qi "ABCvDER"; then
        ((vm_16_abcvder_count++))
      elif echo "$vm_name" | grep -qi "ABCvDE" && ! echo "$vm_name" | grep -qi "ABCvDER"; then
        ((vm_16_abcvde_count++))
      fi
    fi
  done

  echo "$pool_name,$host_name,$cpu,$ctrl_mem_gb,$mem_used_gb,$mem_free_gb,$usable_mem_gb,$ht_status,$vm_count,$vm_32gb_count,$vm_16_abcvde_count,$vm_16_abcvder_count" >> "$csv_file"

  total_cpu=$((total_cpu + cpu))
  total_mem_total=$((total_mem_total + mem_total_gb))
  total_mem_usable=$((total_mem_usable + usable_mem_gb))
  total_mem_used=$((total_mem_used + mem_used_gb))
  total_mem_free=$((total_mem_free + mem_free_gb))
  total_ctrl_mem=$((total_ctrl_mem + ctrl_mem_gb))
  total_vms=$((total_vms + vm_count))
  total_32gb_vms=$((total_32gb_vms + vm_32gb_count))
  total_16_abcvde_vms=$((total_16_abcvde_vms + vm_16_abcvde_count))
  total_16_abcvder_vms=$((total_16_abcvder_vms + vm_16_abcvder_count))
done

usable_mem_pool=$((total_mem_usable - total_ctrl_mem))
total_16gb_vm_cap=$((usable_mem_pool / 16))

{
  echo ""
  echo "POOL SUMMARY"
  echo "Total Running VMs,$total_vms"
  echo "Usable Memory (GB),$usable_mem_pool"
  echo "16GB VM Capacity (Approx),$total_16gb_vm_cap"
  echo "Total 32GB VMs,$total_32gb_vms"
  echo "Total 16GB ABCvDE VMs,$total_16_abcvde_vms"
  echo "Total 16GB ABCvDER VMs,$total_16_abcvder_vms"
} >> "$csv_file"

{
  echo ""
  echo "STORAGE REPOSITORIES"
  echo "SR NAME,TOTAL(GB),USED(GB),FREE(GB),TYPE"
} >> "$csv_file"

total_sr_total=0
total_sr_used=0
for sr_uuid in $(xe sr-list --minimal | tr ',' ' '); do
  sr_name=$(xe sr-param-get uuid="$sr_uuid" param-name=name-label)
  sr_total=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-size)
  sr_used=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-utilisation)
  sr_type=$(xe sr-param-get uuid="$sr_uuid" param-name=type)
  [[ "$sr_type" == "iso" || "$sr_type" == "udev" || "$sr_total" -eq 0 ]] && continue
  total_gb=$((sr_total/1024/1024/1024))
  used_gb=$((sr_used/1024/1024/1024))
  free_gb=$((total_gb - used_gb))
  echo "$sr_name,$total_gb,$used_gb,$free_gb,$sr_type" >> "$csv_file"
  total_sr_total=$((total_sr_total + total_gb))
  total_sr_used=$((total_sr_used + used_gb))
done

total_sr_free=$((total_sr_total - total_sr_used))

{
  echo ""
  echo "POOL CAPACITY SUMMARY"
  echo "Metric,Total(GB)"
  echo "CPU Cores,$total_cpu"
  echo "Memory Total,$total_mem_total"
  echo "Memory Used,$total_mem_used"
  echo "Memory Free,$total_mem_free"
  echo "Usable Memory,$usable_mem_pool"
  echo "SR Total,$total_sr_total"
  echo "SR Used,$total_sr_used"
  echo "SR Free,$total_sr_free"
  echo "Running VMs,$total_vms"
} >> "$csv_file"

sync
sleep 1
echo "$pool_name,$csv_file"
EOF

# ---------- Main Loop ----------
while read -r server; do
  [[ -z "$server" || "$server" =~ ^# ]] && continue
  echo "------------------------------------------------------------------"
  echo "Connecting to $server ..."

  if [[ "$USE_SSH_KEY" == "true" ]]; then
    result=$(ssh -o ConnectTimeout=$SSH_TIMEOUT -o StrictHostKeyChecking=no "$USER@$server" "bash -s" <<< "$REMOTE_SCRIPT" 2>/dev/null)
  else
    result=$(sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT "$USER@$server" "bash -s" <<< "$REMOTE_SCRIPT" 2>/dev/null)
  fi

  pool_name=$(echo "$result" | awk -F',' '{print $1}')
  remote_csv=$(echo "$result" | awk -F',' '{print $2}')
  [[ -z "$pool_name" || -z "$remote_csv" ]] && { echo "âš  Failed on $server"; continue; }

  clean_pool=$(echo "$pool_name" | tr -dc 'A-Za-z0-9_-')
  local_csv="${TMP_DIR}/${clean_pool}_${DATESTAMP}.csv"

  echo "Copying $remote_csv -> $local_csv"
  if [[ "$USE_SSH_KEY" == "true" ]]; then
    scp -o ConnectTimeout=$SSH_TIMEOUT "$USER@$server:$remote_csv" "$local_csv" >/dev/null 2>&1
  else
    sshpass -p "$PASS" scp -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT "$USER@$server:$remote_csv" "$local_csv" >/dev/null 2>&1
  fi

  echo "$pool_name,$server,$(basename "$local_csv")" >> "$MASTER_INDEX"

  sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT "$USER@$server" "rm -f /tmp/xenpool_summary_*.csv" >/dev/null 2>&1
done < "$SERVER_LIST"

# ---------- NEW: Generate index_filelist.txt ----------
echo "------------------------------------------------------------------"
echo "Creating index_filelist.txt ..."
cd "$TMP_DIR" || exit 1
ls -1 xenpool_index_*.csv 2>/dev/null | sort > index_filelist.txt
echo "âœ… File list updated: $INDEX_FILELIST"

echo "------------------------------------------------------------------"
echo "âœ… All Pool Reports Collected Successfully"
echo "ðŸ“˜ Master Index: $MASTER_INDEX"
echo "------------------------------------------------------------------"
exit 0
