#!/bin/bash
# ---------------------------------------------------------------------
# Citrix XenServer Multi-Pool SSH Collector (Unified Report)
# FINAL PRODUCTION VERSION â€” error-proof, cron-safe, unified output
# ---------------------------------------------------------------------

LOCKFILE="/tmp/xenpool_collect.lock"
TMP_DIR="/SCRATCH/report/xenpool_collect_tmp"
COMBINED_FILE="${TMP_DIR}/xenserver_combined_latest.csv"

USER="root"
PASS="justD0it!"
SSHPASS_BIN="/usr/bin/sshpass"
SERVER_LIST="/u/arghyaa/working-script/xs_report/servers.txt"
SSH_TIMEOUT=15

mkdir -p "$TMP_DIR"

# Prevent overlapping runs
if [ -e "$LOCKFILE" ] && kill -0 "$(cat "$LOCKFILE")" 2>/dev/null; then
  echo "Another xenpool_collect run is still in progress. Exiting safely."
  exit 0
fi
echo $$ > "$LOCKFILE"
trap 'rm -f "$LOCKFILE"' EXIT

HOST_TMP="${TMP_DIR}/host_details.tmp"
NFS_TMP="${TMP_DIR}/nfs_details.tmp"
SUMMARY_TMP="${TMP_DIR}/summary_details.tmp"
> "$HOST_TMP"; > "$NFS_TMP"; > "$SUMMARY_TMP"

# ---------------------------------------------------------------------
# Remote collector (executed per XenServer)
# ---------------------------------------------------------------------
REMOTE_SCRIPT=$(cat <<'EOSCRIPT'
#!/bin/bash
export PATH="/usr/sbin:/usr/bin:/sbin:/bin:/opt/xensource/bin"
timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
remote_tmp="/tmp/xenpool_report_${timestamp}.csv"
logfile="/tmp/xen_remote_error_${timestamp}.log"
exec 2>"$logfile"
set +e

pool_name=$(xe pool-list 2>/dev/null | awk -F: '/name-label/ {print $2}' | xargs)
[[ -z "$pool_name" ]] && pool_name="Standalone_Host"
pool_name=$(echo "$pool_name" | sed 's/[, ]\+/_/g; s/-\+/-/g; s/_\+/_/g')
site_name=$(echo "$pool_name" | grep -oE '^[A-Z]{2,}[0-9]{1,3}(?=[_-])' | head -1)
[[ -z "$site_name" ]] && site_name="UNKNOWN"

total_sr_total=0; total_sr_used=0; total_sr_free=0
for sr_uuid in $(xe sr-list --minimal 2>/dev/null | tr ',' ' '); do
  sr_type=$(xe sr-param-get uuid="$sr_uuid" param-name=type 2>/dev/null)
  sr_name=$(xe sr-param-get uuid="$sr_uuid" param-name=name-label 2>/dev/null)
  [[ "$sr_type" == "iso" || "$sr_type" == "udev" || -z "$sr_name" ]] && continue
  sr_total=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-size 2>/dev/null)
  sr_used=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-utilisation 2>/dev/null)
  [[ -z "$sr_total" || -z "$sr_used" ]] && continue
  sr_total_gb=$((sr_total/1024/1024/1024))
  sr_used_gb=$((sr_used/1024/1024/1024))
  sr_free_gb=$((sr_total_gb - sr_used_gb))
  total_sr_total=$((total_sr_total + sr_total_gb))
  total_sr_used=$((total_sr_used + sr_used_gb))
done
total_sr_free=$((total_sr_total - total_sr_used))

hosts=$(xe host-list --minimal 2>/dev/null | tr ',' ' ')
[[ -z "$hosts" ]] && echo "WARN: No hosts found" >>"$logfile"

for uuid in $hosts; do
  mmode=$(xe host-param-get uuid="$uuid" param-name=maintenance-mode 2>/dev/null)
  [[ "$mmode" == "true" ]] && { echo "Skipping maintenance host" >>"$logfile"; continue; }

  host_name=$(xe host-param-get uuid="$uuid" param-name=name-label | xargs)
  host_name=$(echo "$host_name" | sed 's/[, ]\+/_/g')
  cpu_model=$(xe host-cpu-info host-uuid="$uuid" 2>/dev/null | awk -F: '/model name/{print $2}' | head -1 | xargs)
  [[ -z "$cpu_model" ]] && cpu_model=$(grep -m1 "model name" /proc/cpuinfo | cut -d: -f2- | xargs)
  [[ -z "$cpu_model" ]] && cpu_model="Unknown"
  cpu_model=$(echo "$cpu_model" | sed 's/[",]//g')

  dom0_cpu=$(xl vcpu-list 2>/dev/null | awk '/Domain-0/ {count++} END{print count+0}')
  [[ -z "$dom0_cpu" ]] && dom0_cpu=0
  ctrl_mem_mib=$(xl list Domain-0 2>/dev/null | awk 'NR==2{print $3}')
  [[ -z "$ctrl_mem_mib" ]] && ctrl_mem_mib=0
  ctrl_mem_gb=$((ctrl_mem_mib/1024))

  echo "poolhost,${site_name},${pool_name},${host_name},${cpu_model},${dom0_cpu},${ctrl_mem_gb}" >> "$remote_tmp"
done

echo "summary,${site_name},${pool_name},${total_sr_total},${total_sr_used},${total_sr_free}" >> "$remote_tmp"

for nfs_sr in $(xe sr-list type=nfs --minimal 2>/dev/null | tr ',' ' '); do
  [[ -z "$nfs_sr" ]] && continue
  sr_name=$(xe sr-param-get uuid="$nfs_sr" param-name=name-label)
  sr_total=$(xe sr-param-get uuid="$nfs_sr" param-name=physical-size)
  sr_used=$(xe sr-param-get uuid="$nfs_sr" param-name=physical-utilisation)
  total_gb=$((sr_total/1024/1024/1024))
  used_gb=$((sr_used/1024/1024/1024))
  free_gb=$((total_gb - used_gb))
  echo "nfs,${site_name},${pool_name},${sr_name},${total_gb},${used_gb},${free_gb}" >> "$remote_tmp"
done

echo "${pool_name},${remote_tmp}"
EOSCRIPT
)

# ---------------------------------------------------------------------
# SSH Loop - Copy, execute, fetch results
# ---------------------------------------------------------------------
REMOTE_FILE_LOCAL="${TMP_DIR}/xen_remote_collect.sh"
echo "$REMOTE_SCRIPT" > "$REMOTE_FILE_LOCAL"

while read -r server; do
  [[ -z "$server" || "$server" =~ ^# ]] && continue
  echo "Connecting to $server ..."
  $SSHPASS_BIN -p "$PASS" scp -o StrictHostKeyChecking=no "$REMOTE_FILE_LOCAL" "$USER@$server:/tmp/xen_remote_collect.sh" >/dev/null 2>&1 || { echo "Failed to copy script to $server"; continue; }

  result=$($SSHPASS_BIN -p "$PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT "$USER@$server" "bash /tmp/xen_remote_collect.sh" 2>/dev/null)
  pool_name=$(echo "$result" | awk -F',' '{print $1}')
  remote_csv=$(echo "$result" | awk -F',' '{print $2}')
  [[ -z "$pool_name" || -z "$remote_csv" ]] && { echo "No data from $server"; continue; }

  temp_file="${TMP_DIR}/pool_${pool_name}.csv"
  $SSHPASS_BIN -p "$PASS" scp -o StrictHostKeyChecking=no "$USER@$server:$remote_csv" "$temp_file" >/dev/null 2>&1 || { echo "Failed to fetch $remote_csv"; continue; }

  grep '^poolhost,' "$temp_file" >> "$HOST_TMP"
  grep '^nfs,' "$temp_file" >> "$NFS_TMP"
  grep '^summary,' "$temp_file" >> "$SUMMARY_TMP"

  # Cleanup remote temp
  $SSHPASS_BIN -p "$PASS" ssh -o StrictHostKeyChecking=no "$USER@$server" "rm -f /tmp/xenpool_report_*.csv /tmp/xen_remote_collect.sh" >/dev/null 2>&1
done < <(grep -v '^\s*#' "$SERVER_LIST" | sed '/^\s*$/d')

# ---------------------------------------------------------------------
# Final unified report
# ---------------------------------------------------------------------
{
  echo "#HOST DETAILS"
  echo "#TYPE,SITE_NAME,POOL_NAME,HOST_NAME,CPU_MODEL,DOM0_CPU,CTRL_MEM(GB)"
  sort -t',' -k2,2 -k3,3 -k4,4 "$HOST_TMP"
  echo ""
  echo "#NFS REPOSITORIES"
  echo "#TYPE,SITE_NAME,POOL_NAME,SR_NAME,TOTAL(GB),USED(GB),FREE(GB)"
  sort -t',' -k2,2 -k3,3 -k4,4 "$NFS_TMP"
  echo ""
  echo "#POOL SUMMARY"
  echo "#TYPE,SITE_NAME,POOL_NAME,SR_TOTAL(GB),SR_USED(GB),SR_FREE(GB)"
  sort -t',' -k2,2 -k3,3 "$SUMMARY_TMP"
} > "$COMBINED_FILE"

echo "------------------------------------------------------------------"
echo "Unified report written to: $COMBINED_FILE"
echo "------------------------------------------------------------------"

rm -f "$LOCKFILE" 2>/dev/null || true
exit 0
