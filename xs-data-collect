#!/bin/bash
# ---------------------------------------------------------------------
# Citrix XenServer / Hypervisor Multi-Pool SSH Collector (final + net util)
# ---------------------------------------------------------------------

USER=""                   # SSH username
PASS=""                   # SSH password if not using keys
SERVER_LIST="servers.txt" # File containing XenServer pool masters
SSH_TIMEOUT=15
USE_SSH_KEY=false          # true=SSH key, false=password
TMP_DIR="/u/arghyaa/working-script/xs_report/xenpool_collect_tmp"
DATESTAMP=$(date +%Y-%m-%d_%H-%M)
MASTER_INDEX="$TMP_DIR/xenpool_index_${DATESTAMP}.csv"

mkdir -p "$TMP_DIR"
> "$MASTER_INDEX"

[[ ! -f "$SERVER_LIST" ]] && { echo "Error: $SERVER_LIST not found!"; exit 1; }

echo "=============================================================="
echo " Citrix XenServer Multi-Pool SSH Collector (Final + Bandwidth)"
echo "=============================================================="
echo "Using server list: $SERVER_LIST"
echo "Reports directory: $TMP_DIR"
echo "=============================================================="

# --- Remote Script (runs on each XenServer host) ---
read -r -d '' REMOTE_SCRIPT <<'EOF'
#!/bin/bash
timestamp=$(date +"%Y-%m-%d_%H-%M")
csv_file="/tmp/xenpool_summary_${timestamp}.csv"

pool_name=$(xe pool-list 2>/dev/null | awk -F: '/name-label \( RW\):/ {print $2}' | xargs)
[[ -z "$pool_name" ]] && pool_name="Standalone_Host"

hosts=$(xe host-list --minimal | tr ',' ' ')
[[ -z "$hosts" ]] && { echo "No hosts found."; exit 1; }

echo "POOL NAME,HOST NAME,CPU,CPU_MODEL,DOM0_CPU,LOAD_AVG,CTRL_MEM(GB),USED(GB),FREE(GB),TOTAL(GB),RUNNING_VM,HYPERTHREADING,UPTIME_DAYS,ETH0_STATUS,ETH0_SPEED,ETH1_STATUS,ETH1_SPEED,BOND0_STATUS,BOND0_SPEED,BOND_TX(Mbps),BOND_RX(Mbps),NET_UTIL(%)" > "$csv_file"

for uuid in $hosts; do
  host_name=$(xe host-param-get uuid="$uuid" param-name=name-label)
  cpu=$(xe host-cpu-info host-uuid="$uuid" --minimal)
  [[ -z "$cpu" ]] && cpu=0
  cpu_model=$(xe host-cpu-info host-uuid="$uuid" | grep "model name" | head -n1 | cut -d: -f2- | xargs)
  [[ -z "$cpu_model" ]] && cpu_model=$(grep "model name" /proc/cpuinfo | head -n1 | cut -d: -f2- | xargs)
  dom0_cpu=$(xl list Domain-0 2>/dev/null | awk 'NR==2 {print $3}')
  load_avg=$(awk '{print $1}' /proc/loadavg)
  uptime_days=$(awk '{printf "%.1f", $1/86400}' /proc/uptime)

  mem_total_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-total)
  mem_free_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-free)
  ctrl_mem_mib=$(xl list Domain-0 2>/dev/null | awk 'NR==2 {print $3}')
  [[ -z "$ctrl_mem_mib" ]] && ctrl_mem_mib=0
  ctrl_mem_bytes=$((ctrl_mem_mib * 1024 * 1024))
  mem_total_gb=$((mem_total_bytes/1024/1024/1024))
  mem_free_gb=$((mem_free_bytes/1024/1024/1024))
  ctrl_mem_gb=$((ctrl_mem_bytes/1024/1024/1024))
  mem_used_gb=$((mem_total_gb - mem_free_gb))
  usable_mem_gb=$((mem_total_gb - ctrl_mem_gb))
  [[ $mem_used_gb -lt 0 ]] && mem_used_gb=0

  vm_count=$(xe vm-list resident-on="$uuid" power-state=running | grep "name-label" | grep -vi "Control" | wc -l)

  if [[ -f /sys/devices/system/cpu/smt/active ]]; then
    [[ "$(cat /sys/devices/system/cpu/smt/active)" == "1" ]] && ht_state="Enabled" || ht_state="Disabled"
  else
    ht_state="Unknown"
  fi

  # ---- Network status & speed ----
  get_status() {
    local i=$1
    [[ -f /sys/class/net/$i/carrier ]] && { [[ "$(cat /sys/class/net/$i/carrier)" == "1" ]] && echo "UP" || echo "DOWN"; return; }
    [[ -f /sys/class/net/$i/operstate ]] && { [[ "$(cat /sys/class/net/$i/operstate)" == "up" ]] && echo "UP" || echo "DOWN"; return; }
    echo "NA"
  }

  get_speed() {
    local i=$1
    [[ -f /sys/class/net/$i/speed ]] && { cat /sys/class/net/$i/speed 2>/dev/null; return; }
    echo "NA"
  }

  eth0_status=$(get_status eth0)
  eth0_speed=$(get_speed eth0)
  eth1_status=$(get_status eth1)
  eth1_speed=$(get_speed eth1)
  bond0_status=$(get_status bond0)
  bond0_speed=$(get_speed bond0)

  # ---- Bandwidth Utilization (bond0 with 2Ã—10G) ----
  total_rx_mbps=0
  total_tx_mbps=0
  total_speed_mbps=0
  iface_count=0

  if xe bond-list | grep -q "master ( RO): bond0"; then
    slaves=$(xe bond-list params=slaves | grep -A1 "master ( RO): bond0" | tail -n1 | awk -F: '{print $2}' | xargs)
    for s_uuid in $(echo "$slaves" | tr ',' ' '); do
      s_dev=$(xe pif-param-get uuid=$s_uuid param-name=device 2>/dev/null)
      [[ -z "$s_dev" ]] && continue
      rx1=$(cat /sys/class/net/$s_dev/statistics/rx_bytes 2>/dev/null)
      tx1=$(cat /sys/class/net/$s_dev/statistics/tx_bytes 2>/dev/null)
      sleep 1
      rx2=$(cat /sys/class/net/$s_dev/statistics/rx_bytes 2>/dev/null)
      tx2=$(cat /sys/class/net/$s_dev/statistics/tx_bytes 2>/dev/null)
      rx_diff=$((rx2 - rx1))
      tx_diff=$((tx2 - tx1))
      rx_mbps=$(awk -v d="$rx_diff" 'BEGIN{printf "%.2f",(d*8)/(1024*1024)}')
      tx_mbps=$(awk -v d="$tx_diff" 'BEGIN{printf "%.2f",(d*8)/(1024*1024)}')
      total_rx_mbps=$(awk -v a="$total_rx_mbps" -v b="$rx_mbps" 'BEGIN{printf "%.2f",a+b}')
      total_tx_mbps=$(awk -v a="$total_tx_mbps" -v b="$tx_mbps" 'BEGIN{printf "%.2f",a+b}')
      iface_speed=$(cat /sys/class/net/$s_dev/speed 2>/dev/null)
      [[ "$iface_speed" =~ ^[0-9]+$ ]] && total_speed_mbps=$((total_speed_mbps + iface_speed))
      ((iface_count++))
    done
  fi

  if [[ $iface_count -gt 0 && $total_speed_mbps -gt 0 ]]; then
    total_util_pct=$(awk -v tx="$total_tx_mbps" -v rx="$total_rx_mbps" -v spd="$total_speed_mbps" \
      'BEGIN{printf "%.2f", ((tx+rx)/spd)*100}')
  else
    total_util_pct="NA"
  fi

  # ---- Append host line ----
  echo "$pool_name,$host_name,$cpu,\"$cpu_model\",$dom0_cpu,$load_avg,$ctrl_mem_gb,$mem_used_gb,$mem_free_gb,$usable_mem_gb,$vm_count,$ht_state,$uptime_days,$eth0_status,$eth0_speed,$eth1_status,$eth1_speed,$bond0_status,$bond0_speed,$total_tx_mbps,$total_rx_mbps,$total_util_pct" >> "$csv_file"

done

# ---- Pool summary tables (unchanged) ----
{
  echo ""
  echo "POOL SUMMARY"
  echo "METRIC,VALUE"
  echo "Total Running VMs,$(xe vm-list power-state=running | grep -c name-label)"
} >> "$csv_file"

{
  echo ""
  echo "STORAGE REPOSITORIES"
  echo "SR NAME,TOTAL(GB),USED(GB),FREE(GB),TYPE"
  for sr_uuid in $(xe sr-list --minimal | tr ',' ' '); do
    sr_name=$(xe sr-param-get uuid=$sr_uuid param-name=name-label)
    sr_total=$(xe sr-param-get uuid=$sr_uuid param-name=physical-size)
    sr_used=$(xe sr-param-get uuid=$sr_uuid param-name=physical-utilisation)
    sr_type=$(xe sr-param-get uuid=$sr_uuid param-name=type)
    [[ "$sr_type" == "iso" || "$sr_type" == "udev" ]] && continue
    total_gb=$((sr_total/1024/1024/1024))
    used_gb=$((sr_used/1024/1024/1024))
    free_gb=$((total_gb - used_gb))
    echo "$sr_name,$total_gb,$used_gb,$free_gb,$sr_type"
  done
} >> "$csv_file"

{
  echo ""
  echo "POOL CAPACITY SUMMARY"
  echo "METRIC,VALUE"
  echo "CPU Cores,$(xe host-cpu-info | grep -c cpu-count)"
  echo "Memory Total (GB),$mem_total_gb"
  echo "Memory Used (GB),$mem_used_gb"
  echo "Memory Free (GB),$mem_free_gb"
  echo "SR Total (GB),$total_gb"
  echo "SR Used (GB),$used_gb"
  echo "SR Free (GB),$free_gb"
} >> "$csv_file"

echo "$pool_name,$csv_file"
EOF

# --- Collector main loop (same as before) ---
for server in $(grep -v '^\s*#' "$SERVER_LIST" | xargs); do
  echo "------------------------------------------------------------------"
  echo "Connecting to $server ..."

  if [[ "$USE_SSH_KEY" == true ]]; then
    result=$(ssh -o ConnectTimeout=$SSH_TIMEOUT $USER@$server "bash -s" <<< "$REMOTE_SCRIPT" 2>/dev/null)
  else
    result=$(sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT $USER@$server "bash -s" <<< "$REMOTE_SCRIPT" 2>/dev/null)
  fi

  pool_name=$(echo "$result" | awk -F',' '{print $1}')
  remote_csv=$(echo "$result" | awk -F',' '{print $2}')
  [[ -z "$pool_name" || -z "$remote_csv" ]] && { echo "Failed to collect from $server"; continue; }

  clean_pool=$(echo "$pool_name" | tr -dc 'A-Za-z0-9_-')
  local_csv="$TMP_DIR/${clean_pool}_${DATESTAMP}.csv"
  echo "Fetching CSV from $server ..."
  sshpass -p "$PASS" scp -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT "$USER@$server:$remote_csv" "$local_csv" >/dev/null 2>&1
  [[ -f "$local_csv" ]] && echo "$pool_name,$server,$local_csv" >> "$MASTER_INDEX"
done

echo "------------------------------------------------------------------"
echo " All Pool Reports Collected"
echo " Master Index: $MASTER_INDEX"
echo "------------------------------------------------------------------"

find "$TMP_DIR" -type f -name "xenpool_index_*.csv" -exec basename {} \; | sort > "${TMP_DIR}/index_filelist.txt"
echo "Index file list created: ${TMP_DIR}/index_filelist.txt"
