#!/bin/bash

# Usage: ./script.sh <file> <hostname_to_match>
# Example: ./script.sh config.txt test-1234-001.static.test.com

CONFIG_FILE="$1"
HOSTNAME="$2"

# Validate input
if [[ -z "$CONFIG_FILE" || -z "$HOSTNAME" ]]; then
  echo "Usage: $0 <file> <hostname_to_match>"
  exit 1
fi

if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "Error: Config file '$CONFIG_FILE' does not exist."
  exit 1
fi

# Backup the original file
cp "$CONFIG_FILE" "${CONFIG_FILE}.bak"

awk -v host="$HOSTNAME" '
  BEGIN {
    block_active = 0;  # To track if we are inside a block
    delete_block = 0;  # To mark the block for deletion
    output_block = ""; # To store the content of the current block
  }

  # Detect the start of a block (Begin Limit)
  /^Begin[[:space:]]*Limit/ {
    block_active = 1;
    delete_block = 0;
    output_block = $0 "\n";  # Store Begin Limit line
    next;
  }

  # Process each line inside the block
  block_active {
    output_block = output_block $0 "\n";  # Add current line to output block

    if ($1 ~ /^HOST=/) {
      # Extract hosts from the HOST= line
      hosts_line = substr($0, index($0, "=") + 1);  # Get everything after 'HOST='
      split(hosts_line, hosts, " ");  # Split into individual hostnames
      remaining_hosts = "";  # To hold remaining hosts
      found_host = 0;

      # Loop through hosts and check if the target host is present
      for (i in hosts) {
        if (hosts[i] == host) {
          found_host = 1;
        } else {
          remaining_hosts = remaining_hosts (remaining_hosts == "" ? "" : " ") hosts[i];
        }
      }

      # If the host matches and there are no other hosts, mark block for deletion
      if (found_host && length(remaining_hosts) == 0) {
        delete_block = 1;
      }

      # Otherwise, update the HOST= line with remaining hosts
      if (found_host && length(remaining_hosts) > 0) {
        gsub(/HOST=.*/, "HOST=" remaining_hosts, $0);  # Replace with remaining hosts
        output_block = $0 "\n";  # Store updated HOST line
      }
    }
    next;
  }

  # Detect the end of a block (End Limit)
  /^End[[:space:]]*Limit/ {
    if (block_active && !delete_block) {
      output_block = output_block $0 "\n";  # Add End Limit line
      print output_block;  # Print the block if not marked for deletion
    }
    block_active = 0;  # Reset block active flag
    output_block = ""; # Reset block content
    next;
  }

  # Print all lines outside of blocks
  !block_active {
    print $0;
  }
' "$CONFIG_FILE" > "${CONFIG_FILE}.tmp" && mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"

echo "Processing completed. Backup saved as ${CONFIG_FILE}.bak."
