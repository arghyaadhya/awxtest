<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Citrix XenServer Dashboard</title>
<style>
body {font-family: Arial, sans-serif; background-color:#f5f8fc; color:#222; margin:40px;}
h1 {color:#005eb8;}
select, input[type=text] {padding:8px; margin:5px; border-radius:5px; border:1px solid #ccc;}
table {border-collapse:collapse; width:100%; margin-top:20px; background:white;}
th, td {border:1px solid #ccc; padding:8px; text-align:left;}
th {background-color:#007bff; color:white;}
tr:nth-child(even){background-color:#f2f2f2;}
.container {max-width:1100px; margin:auto; background:#fff; padding:20px; border-radius:8px; box-shadow:0 0 10px rgba(0,0,0,0.1);}
.chart-container {display:flex; flex-wrap:wrap; gap:30px; margin-top:30px; justify-content:center;}
canvas {width:250px; height:250px;}
.chart-title {text-align:center; margin-top:10px; font-weight:bold;}
.section-title {margin-top:40px; font-size:18px; font-weight:bold; color:#005eb8;}
#timer {font-size:14px; color:#666;}
</style>
</head>
<body>
<div class="container">
  <h1>Citrix XenServer Resource Dashboard</h1>
  <p><b>Generated:</b> <span id="genTime"></span></p>
  <p id="timer">Next auto-refresh in 60:00 minutes</p>

  <label for="siteSelect"><b>Select Site:</b></label>
  <select id="siteSelect"><option value="">-- Select Site --</option></select>

  <label for="poolSelect"><b>Select Pool:</b></label>
  <select id="poolSelect"><option value="">-- Select Pool --</option></select>

  <label for="dateSelect"><b>Select Date:</b></label>
  <select id="dateSelect"><option value="">-- Select Date --</option></select>

  <label for="searchBox"><b>Search:</b></label>
  <input type="text" id="searchBox" placeholder="Search site or pool...">

  <div id="reportArea"></div>
</div>

<script>
// ===== Timer / Auto-refresh =====
const REFRESH_INTERVAL = 3600000; // 1 hour
let countdown = 3600;
setInterval(() => {
  countdown--;
  const m = String(Math.floor(countdown / 60)).padStart(2,'0');
  const s = String(countdown % 60).padStart(2,'0');
  document.getElementById('timer').innerText =
    "Next auto-refresh in " + m + ":" + s + " minutes";
}, 1000);
setTimeout(() => location.reload(), REFRESH_INTERVAL);

// ===== Parse CSV =====
function parseCSV(text) {
  return text.trim().split(/\r?\n/).map(l => l.split(',').map(x => x.trim()));
}

// ===== Auto-detect all index CSVs =====
async function getAllIndexFiles() {
  const res = await fetch(window.location.href).catch(()=>null);
  if (!res || !res.ok) return [];
  const html = await res.text();
  const matches = [...html.matchAll(/xenpool_index_\d{4}-\d{2}-\d{2}_\d{2}-\d{2}\.csv/g)].map(m=>m[0]);
  matches.sort();
  return matches;
}

// ===== Load index CSV =====
async function loadIndexData(indexFile) {
  const res = await fetch(indexFile + '?_=' + Date.now()).catch(()=>null);
  if (!res || !res.ok) return [];
  const text = await res.text();
  let lines = parseCSV(text).filter(l => l.length >= 2);
  if (lines[0] && lines[0][0].toUpperCase().includes("POOL NAME")) lines = lines.slice(1);

  const data = [];
  for (const [pool_name,, csv_path] of lines) {
    if (!csv_path) continue;
    const poolNameClean = pool_name.trim();
    const parts = poolNameClean.split('_');
    const site = parts[0].toUpperCase();
    const pool = parts.slice(1).join('_').toUpperCase();
    const date = indexFile.match(/\d{4}-\d{2}-\d{2}/)[0];
    data.push({site, pool, csv_path, indexFile, date});
  }
  return data;
}

// ===== Dropdown Builders =====
function populateSites(data) {
  const sites = [...new Set(data.map(d=>d.site))].sort();
  const sel=document.getElementById('siteSelect');
  sel.innerHTML='<option value="">-- Select Site --</option>';
  sites.forEach(s=>{const o=document.createElement('option');o.value=s;o.textContent=s;sel.appendChild(o);});
}
function populatePools(site, data) {
  const pools=[...new Set(data.filter(d=>d.site===site).map(d=>d.pool))];
  const sel=document.getElementById('poolSelect');
  sel.innerHTML='<option value="">-- Select Pool --</option>';
  pools.forEach(p=>{const o=document.createElement('option');o.value=p;o.textContent=p;sel.appendChild(o);});
}
function populateDates(pool, data) {
  const dates=[...new Set(data.filter(d=>d.pool===pool).map(d=>d.date))];
  const sel=document.getElementById('dateSelect');
  sel.innerHTML='<option value="">-- Select Date --</option>';
  dates.forEach(dt=>{const o=document.createElement('option');o.value=dt;o.textContent=dt;sel.appendChild(o);});
}

// ===== Pie Chart =====
function drawPie(canvas, used, total, label, color) {
  const ctx=canvas.getContext('2d');
  const usedPct=total?Math.min((used/total)*100,100):0;
  const angle=(usedPct/100)*2*Math.PI;
  const cx=125,cy=125,r=100;
  ctx.clearRect(0,0,250,250);
  ctx.beginPath();ctx.moveTo(cx,cy);ctx.arc(cx,cy,r,0,2*Math.PI);ctx.closePath();ctx.fillStyle='#e5e5e5';ctx.fill();
  ctx.beginPath();ctx.moveTo(cx,cy);ctx.arc(cx,cy,r,-Math.PI/2,-Math.PI/2+angle,false);ctx.closePath();
  ctx.fillStyle=color;ctx.fill();
  ctx.fillStyle='#000';ctx.font='16px Arial';ctx.textAlign='center';ctx.textBaseline='middle';
  ctx.fillText(label,cx,cy-10);ctx.fillText(`${usedPct.toFixed(1)}% Used`,cx,cy+15);
}

// ===== Load Pool Report =====
async function showReport(pool, date, allData) {
  const entries=allData.filter(d=>d.pool===pool && d.date===date);
  if(entries.length===0){
    document.getElementById('reportArea').innerHTML=`<p style='color:red'>No data found for ${pool} on ${date}</p>`;
    return;
  }
  entries.sort((a,b)=>a.indexFile.localeCompare(b.indexFile));
  const entry=entries[entries.length-1];
  const res=await fetch(entry.csv_path).catch(()=>null);
  if(!res||!res.ok){document.getElementById('reportArea').innerHTML=`<p style='color:red'>Unable to load CSV.</p>`;return;}
  const txt=await res.text();
  const lines=txt.split(/\r?\n/);
  const hosts=[];
  const summary={};
  let section='main';
  for(const l of lines){
    if(l.startsWith('POOL NAME'))continue;
    if(l.startsWith('POOL SUMMARY')){section='summary';continue;}
    if(section==='main' && l.includes(',')){
      const f=l.split(',');
      if(f.length>=8 && f[0]!=='POOL NAME')hosts.push({host:f[1],cpu:f[2],ctrl_mem:f[3],used:f[4],free:f[5],total:f[6],vms:f[7]});
    }
    if(l.startsWith('CPU Cores'))summary.cpu=+l.split(',')[1];
    if(l.startsWith('Memory Total'))summary.mem_total=+l.split(',')[1];
    if(l.startsWith('Memory Used'))summary.mem_used=+l.split(',')[1];
    if(l.startsWith('SR Total'))summary.sr_total=+l.split(',')[1];
    if(l.startsWith('SR Used'))summary.sr_used=+l.split(',')[1];
    if(l.startsWith('Total Running VMs'))summary.vms=+l.split(',')[1];
    if(l.startsWith('16GB VM Capacity'))summary.vm_capacity=+l.split(',')[1];
  }
  const memUsedPct=((summary.mem_used/summary.mem_total)*100).toFixed(1);
  const srUsedPct=((summary.sr_used/summary.sr_total)*100).toFixed(1);
  const vmUsedPct=((summary.vms/summary.vm_capacity)*100).toFixed(1);

  let html=`
  <h2>Site: ${entry.site} | Pool: ${entry.pool} | Date: ${date}</h2>
  <table>
    <tr><th>Metric</th><th>Value</th></tr>
    <tr><td>CPU Cores</td><td>${summary.cpu||'N/A'}</td></tr>
    <tr><td>Memory Total (GB)</td><td>${summary.mem_total||'N/A'}</td></tr>
    <tr><td>Memory Used (GB)</td><td>${summary.mem_used||'N/A'}</td></tr>
    <tr><td>SR Total (GB)</td><td>${summary.sr_total||'N/A'}</td></tr>
    <tr><td>SR Used (GB)</td><td>${summary.sr_used||'N/A'}</td></tr>
    <tr><td>Total Running VMs</td><td>${summary.vms||'N/A'}</td></tr>
    <tr><td>VM Capacity (16GB)</td><td>${summary.vm_capacity||'N/A'}</td></tr>
  </table>
  <div class='chart-container'>
    <div><canvas id='memChart' width='250' height='250'></canvas><div class='chart-title'>Memory Usage (${memUsedPct}%)</div></div>
    <div><canvas id='srChart' width='250' height='250'></canvas><div class='chart-title'>Storage Usage (${srUsedPct}%)</div></div>
    <div><canvas id='vmChart' width='250' height='250'></canvas><div class='chart-title'>VM Utilization (${vmUsedPct}%)</div></div>
  </div>
  <div class='section-title'>Pool Host Details</div>
  <table><tr><th>Host</th><th>CPU</th><th>Ctrl Mem</th><th>Used</th><th>Free</th><th>Total</th><th>Running VMs</th></tr>`;
  hosts.forEach(h=>{html+=`<tr><td>${h.host}</td><td>${h.cpu}</td><td>${h.ctrl_mem}</td><td>${h.used}</td><td>${h.free}</td><td>${h.total}</td><td>${h.vms}</td></tr>`;});
  html+=`</table>`;
  document.getElementById('reportArea').innerHTML=html;
  drawPie(document.getElementById('memChart'),summary.mem_used,summary.mem_total,'Memory','#007bff');
  drawPie(document.getElementById('srChart'),summary.sr_used,summary.sr_total,'Storage','#28a745');
  drawPie(document.getElementById('vmChart'),summary.vms,summary.vm_capacity,'VMs','#ff9800');
}

// ===== Main Init =====
(async function init(){
  document.getElementById('genTime').innerText=new Date().toLocaleString();
  const allIndexes=await getAllIndexFiles();
  if(allIndexes.length===0){document.getElementById('reportArea').innerHTML='<p style="color:red">No index files found.</p>';return;}
  let allData=[];
  for(const f of allIndexes){const d=await loadIndexData(f);allData.push(...d);}
  populateSites(allData);

  document.getElementById('siteSelect').addEventListener('change',e=>{
    populatePools(e.target.value,allData);
    document.getElementById('dateSelect').innerHTML='<option value="">-- Select Date --</option>';
    document.getElementById('reportArea').innerHTML='';
  });

  document.getElementById('poolSelect').addEventListener('change',e=>{
    populateDates(e.target.value,allData);
    document.getElementById('reportArea').innerHTML='';
  });

  document.getElementById('dateSelect').addEventListener('change',e=>{
    const pool=document.getElementById('poolSelect').value;
    showReport(pool,e.target.value,allData);
  });

  document.getElementById('searchBox').addEventListener('keyup',e=>{
    const q=e.target.value.toLowerCase();
    const m=allData.find(x=>x.site.toLowerCase().includes(q)||x.pool.toLowerCase().includes(q));
    if(m){
      document.getElementById('siteSelect').value=m.site;
      populatePools(m.site,allData);
      document.getElementById('poolSelect').value=m.pool;
      populateDates(m.pool,allData);
      showReport(m.pool,m.date,allData);
    }
  });
})();
</script>
</body>
</html>
