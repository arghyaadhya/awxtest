#!/bin/bash
# ---------------------------------------------------------------------
# Citrix XenServer / Hypervisor Pool Resource Summary (v16)
# ---------------------------------------------------------------------
# âœ… Fix 1: Accurate VM counting using human-readable names (excluding Control Domain)
# âœ… Fix 2: Correct usable memory calculation (Total GB - Control Domain GB)
# âœ… All other logic, layout, CSV output preserved
# ---------------------------------------------------------------------

if ! command -v xe &>/dev/null; then
  echo "Error: xe command not found. Run this on a Citrix Hypervisor host (preferably the pool master)."
  exit 1
fi

timestamp=$(date +"%Y-%m-%d_%H-%M")
csv_file="/tmp/xenpool_summary_${timestamp}.csv"

# --- Get pool name ---
pool_name=$(xe pool-list | grep "name-label ( RW):" | awk '{print $4}')
[[ -z "$pool_name" ]] && pool_name="Standalone Host (No Pool)"

echo "============================================================"
echo " Citrix XenServer Pool Resource Summary"
echo " Pool Name : $pool_name"
echo "============================================================"
echo

# --- Totals ---
total_cpu=0
total_mem_total=0
total_mem_used=0
total_mem_free=0
total_ctrl_mem=0
total_vms=0

printf "%-20s %-25s %-10s %-15s %-15s %-15s %-15s %-10s\n" \
  "POOL NAME" "HOST NAME" "CPU" "CTRL_MEM(GB)" "USED(GB)" "FREE(GB)" "TOTAL(GB)" "RUNNING_VM"
echo "----------------------------------------------------------------------------------------------------------------------------"

# --- CSV Header ---
echo "POOL NAME,HOST NAME,CPU,CTRL_MEM(GB),USED(GB),FREE(GB),TOTAL(GB),RUNNING_VM" > "$csv_file"

hosts=$(xe host-list --minimal | tr ',' ' ')
if [[ -z "$hosts" ]]; then
  echo "No hosts found. Are you on the pool master?"
  exit 1
fi

for uuid in $hosts; do
  host_name=$(xe host-param-get uuid="$uuid" param-name=name-label)

  # âœ… Keep working CPU count logic
  cpu=$(xe host-cpu-info host-uuid="$uuid" --minimal)
  [[ -z "$cpu" ]] && cpu=0

  # âœ… Memory details
  mem_total_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-total)
  mem_free_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-free)

  # --- Control domain memory detection via xl ---
  ctrl_mem_mib=$(xl list Domain-0 2>/dev/null | awk 'NR==2 {print $3}')
  [[ -z "$ctrl_mem_mib" ]] && ctrl_mem_mib=0
  ctrl_mem_bytes=$((ctrl_mem_mib * 1024 * 1024))

  # --- Convert to GB ---
  mem_total_gb=$((mem_total_bytes/1024/1024/1024))
  mem_free_gb=$((mem_free_bytes/1024/1024/1024))
  ctrl_mem_gb=$((ctrl_mem_bytes/1024/1024/1024))

  # --- Used memory = total - free ---
  mem_used_gb=$((mem_total_gb - mem_free_gb))

  # --- Usable memory excludes Dom0 ---
  usable_mem_gb=$((mem_total_gb - ctrl_mem_gb))
  [[ $mem_used_gb -lt 0 ]] && mem_used_gb=0

  # âœ… Reliable Running VMs per host (using readable names, excluding Control Domain)
  vm_count=$(xe vm-list resident-on="$uuid" power-state=running \
    | grep "name-label" | grep -vi "Control" | awk '{print $NF}' | sort | wc -l)

  printf "%-20s %-25s %-10s %-15s %-15s %-15s %-15s %-10s\n" \
    "$pool_name" "$host_name" "$cpu" "$ctrl_mem_gb" "$mem_used_gb" "$mem_free_gb" "$usable_mem_gb" "$vm_count"

  # --- Write to CSV ---
  echo "$pool_name,$host_name,$cpu,$ctrl_mem_gb,$mem_used_gb,$mem_free_gb,$usable_mem_gb,$vm_count" >> "$csv_file"

  # --- Totals ---
  total_cpu=$((total_cpu + cpu))
  total_mem_total=$((total_mem_total + mem_total_gb))
  total_mem_used=$((total_mem_used + mem_used_gb))
  total_mem_free=$((total_mem_free + mem_free_gb))
  total_ctrl_mem=$((total_ctrl_mem + ctrl_mem_gb))
  total_vms=$((total_vms + vm_count))
done

# --- Corrected Pool-level usable memory calculation ---
usable_mem_pool=$((total_mem_total - total_ctrl_mem))
total_16gb_vm_cap=$((usable_mem_pool / 16))

echo "----------------------------------------------------------------------------------------------------------------------------"
printf "%-20s %-25s %-10s %-15s %-15s %-15s %-15s %-10s\n" \
  "TOTAL" "" "$total_cpu" "$total_ctrl_mem" "$total_mem_used" "$total_mem_free" "$usable_mem_pool" "$total_vms"
echo "----------------------------------------------------------------------------------------------------------------------------"
echo
echo "ðŸ§® Pool Summary:"
echo "  â†’ Total Running VMs in Pool        : $total_vms"
echo "  â†’ Usable Memory in Pool (GB)       : $usable_mem_pool"
echo "  â†’ Approx. 16GB VMs Can Be Created  : $total_16gb_vm_cap"
echo
echo "Host summary written to: $csv_file"
echo

# --- Append Pool Summary to CSV ---
{
  echo ""
  echo "POOL SUMMARY"
  echo "Total Running VMs,$total_vms"
  echo "Usable Memory (GB),$usable_mem_pool"
  echo "16GB VM Capacity (Approx),$total_16gb_vm_cap"
} >> "$csv_file"

# --- Storage Section ---
echo "============================================================"
echo " Storage Repositories Summary (Excluding DVD & 0-size SRs)"
echo "============================================================"
printf "%-35s %-12s %-12s %-12s %-15s\n" \
  "SR NAME" "TOTAL(GB)" "USED(GB)" "FREE(GB)" "TYPE"
echo "--------------------------------------------------------------------------"

# --- Append Storage Header to CSV ---
{
  echo ""
  echo "SR NAME,TOTAL(GB),USED(GB),FREE(GB),TYPE"
} >> "$csv_file"

for sr_uuid in $(xe sr-list --minimal | tr ',' ' '); do
  sr_name=$(xe sr-param-get uuid="$sr_uuid" param-name=name-label)
  sr_total=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-size)
  sr_used=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-utilisation)
  sr_type=$(xe sr-param-get uuid="$sr_uuid" param-name=type)

  # Skip DVD/udev/empty SRs
  if [[ "$sr_type" == "iso" ]] || [[ "$sr_type" == "udev" ]] || [[ "$sr_total" -eq 0 ]]; then
    continue
  fi

  total_gb=$((sr_total/1024/1024/1024))
  used_gb=$((sr_used/1024/1024/1024))
  free_gb=$((total_gb - used_gb))

  printf "%-35s %-12s %-12s %-12s %-15s\n" "$sr_name" "$total_gb" "$used_gb" "$free_gb" "$sr_type"

  echo "$sr_name,$total_gb,$used_gb,$free_gb,$sr_type" >> "$csv_file"
done

echo "--------------------------------------------------------------------------"
echo " Summary completed successfully."
echo " CSV file generated: $csv_file"
