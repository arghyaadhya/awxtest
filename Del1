#!/bin/bash

# Usage: ./script.sh <file> <hostname_to_match>
# Example: ./script.sh config.txt test-1234-001.static.test.com

CONFIG_FILE="$1"
HOSTNAME="$2"

if [[ -z "$CONFIG_FILE" || -z "$HOSTNAME" ]]; then
  echo "Usage: $0 <file> <hostname_to_match>"
  exit 1
fi

# Backup the original file
cp "$CONFIG_FILE" "${CONFIG_FILE}.bak"

awk -v host="$HOSTNAME" '
  BEGIN {
    block_active = 0;    # Whether we are inside a block
    delete_block = 0;    # Whether to delete the block
    host_removed = 0;    # To track if the host was removed from HOST line
  }

  # Begin of a block
  /^Begin Limit$/ {
    block_active = 1;
    delete_block = 0;
    host_removed = 0;
    print $0;  # Print the current "Begin Limit" line
    next;
  }

  # Process lines within the block
  block_active {
    # If we are processing the HOST line
    if ($1 == "HOST=") {
      split($2, hosts, " ");  # Split HOST values into an array
      remaining_hosts = "";   # To rebuild the remaining HOST list
      found_host = 0;         # Flag to track if the host is found

      for (i in hosts) {
        if (hosts[i] == host) {
          found_host = 1;    # Mark that we found the host
        } else {
          # Rebuild remaining HOST line
          remaining_hosts = remaining_hosts (remaining_hosts == "" ? "" : " ") hosts[i];
        }
      }

      # Check conditions for deleting or updating
      if (found_host && remaining_hosts == "") {
        # If only the matched host exists, mark the block for deletion
        delete_block = 1;
      } else if (found_host) {
        # Otherwise, update the HOST line with the remaining hosts
        $0 = "HOST=" remaining_hosts;
        host_removed = 1;  # Mark that the host was removed
      }
    }

    # Do not print lines if the block is marked for deletion
    if (!delete_block) {
      print $0;
    }
    next;
  }

  # End of a block
  /^End Limit$/ {
    if (!delete_block) {
      print $0;  # Print "End Limit" if the block is not deleted
    }
    block_active = 0;  # End of the current block
    next;
  }

  # Lines outside of blocks
  {
    print $0;
  }
' "$CONFIG_FILE" > "${CONFIG_FILE}.tmp" && mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"

echo "Processing completed. Backup saved as ${CONFIG_FILE}.bak."
