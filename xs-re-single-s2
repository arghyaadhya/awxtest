#!/bin/bash
# ---------------------------------------------------------------------
# Citrix XenServer / Hypervisor Pool Resource Summary (v7)
# ---------------------------------------------------------------------
# ✅ Shows pool name before host name
# ✅ Skips maintenance hosts in totals
# ✅ Deducts control domain (Dom0) memory
# ✅ Displays CPU, total/used/free memory, and actual running VM count
# ✅ Skips ISO/DVD/udev/0-size SRs
# ---------------------------------------------------------------------

# --- Check for xe CLI ---
if ! command -v xe &>/dev/null; then
  echo "Error: xe command not found. Run this on a XenServer host (preferably the pool master)."
  exit 1
fi

# --- Get pool name ---
pool_name=$(xe pool-list --minimal 2>/dev/null)
[[ -z "$pool_name" ]] && pool_name="Standalone Host (No Pool)"

echo "============================================================"
echo " Citrix XenServer Pool Resource Summary"
echo " Pool Name : $pool_name"
echo "============================================================"
echo

# --- Initialize totals ---
total_cpu=0
total_mem_total=0
total_mem_used=0
total_mem_free=0
total_running_vms=0

printf "%-20s %-25s %-8s %-12s %-12s %-12s %-12s %-10s\n" \
  "POOL NAME" "HOST NAME" "CPU" "RUNNING VM" "USED(GB)" "FREE(GB)" "TOTAL(GB)" "STATUS"
echo "------------------------------------------------------------------------------------------------------------"

# --- Loop through each host ---
for uuid in $(xe host-list --minimal | tr ',' ' '); do
  host_name=$(xe host-param-get uuid="$uuid" param-name=name-label)
  maintenance=$(xe host-param-get uuid="$uuid" param-name=maintenance)

  [[ "$maintenance" == "true" ]] && status="MAINTENANCE" || status="ACTIVE"

  # ✅ CPU count
  cpu_list=$(xe host-cpu-info host-uuid="$uuid" --minimal 2>/dev/null)
  [[ -n "$cpu_list" ]] && cpu_count=$(( ${#cpu_list//[^,]/} + 1 )) || cpu_count=0

  # ✅ Memory stats
  mem_total_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-total)
  mem_free_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-free)
  ctrl_mem_bytes=$(xe host-param-get uuid="$uuid" param-name=control-domain-memory 2>/dev/null)
  [[ -z "$ctrl_mem_bytes" ]] && ctrl_mem_bytes=0

  mem_total_gb=$((mem_total_bytes/1024/1024/1024))
  mem_free_gb=$((mem_free_bytes/1024/1024/1024))
  ctrl_mem_gb=$((ctrl_mem_bytes/1024/1024/1024))

  usable_mem_gb=$((mem_total_gb - ctrl_mem_gb))
  mem_used_gb=$((usable_mem_gb - mem_free_gb))
  [[ $mem_used_gb -lt 0 ]] && mem_used_gb=0

  # ✅ Running VMs count
  vm_raw=$(xe vm-list resident-on="$uuid" power-state=running --minimal 2>/dev/null)
  if [[ -n "$vm_raw" ]]; then
    running_vms=$(( $(grep -o ',' <<< "$vm_raw" | wc -l) + 1 ))
  else
    running_vms=0
  fi

  # --- Print host info ---
  printf "%-20s %-25s %-8s %-12s %-12s %-12s %-12s %-10s\n" \
    "$pool_name" "$host_name" "$cpu_count" "$running_vms" "$mem_used_gb" "$mem_free_gb" "$usable_mem_gb" "$status"

  # --- Totals (active only) ---
  if [[ "$maintenance" != "true" ]]; then
    total_cpu=$((total_cpu + cpu_count))
    total_mem_total=$((total_mem_total + usable_mem_gb))
    total_mem_used=$((total_mem_used + mem_used_gb))
    total_mem_free=$((total_mem_free + mem_free_gb))
    total_running_vms=$((total_running_vms + running_vms))
  fi
done

echo "------------------------------------------------------------------------------------------------------------"
printf "%-20s %-25s %-8s %-12s %-12s %-12s %-12s %-10s\n" \
  "TOTAL (ACTIVE)" "" "$total_cpu" "$total_running_vms" "$total_mem_used" "$total_mem_free" "$total_mem_total" ""
echo "------------------------------------------------------------------------------------------------------------"
echo " Total Active Running VMs Across Pool: $total_running_vms"
echo

# --- Storage Summary ---
echo "============================================================"
echo " Storage Repositories Summary (Excluding DVD & 0-size SRs)"
echo "============================================================"
printf "%-35s %-12s %-12s %-12s %-15s\n" \
  "SR NAME" "TOTAL(GB)" "USED(GB)" "FREE(GB)" "TYPE"
echo "--------------------------------------------------------------------------"

for sr_uuid in $(xe sr-list --minimal | tr ',' ' '); do
  sr_name=$(xe sr-param-get uuid="$sr_uuid" param-name=name-label)
  sr_total=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-size)
  sr_used=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-utilisation)
  sr_type=$(xe sr-param-get uuid="$sr_uuid" param-name=type)

  # Skip SRs that are ISO/DVD/udev or 0-size
  if [[ "$sr_type" == "iso" ]] || [[ "$sr_type" == "udev" ]] || [[ "$sr_total" -eq 0 ]]; then
    continue
  fi

  total_gb=$((sr_total/1024/1024/1024))
  used_gb=$((sr_used/1024/1024/1024))
  free_gb=$((total_gb - used_gb))

  printf "%-35s %-12s %-12s %-12s %-15s\n" \
    "$sr_name" "$total_gb" "$used_gb" "$free_gb" "$sr_type"
done

echo "--------------------------------------------------------------------------"
echo " Summary completed successfully."
