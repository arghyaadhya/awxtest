#!/bin/bash
# ---------------------------------------------------------------------
# Citrix XenServer Interactive HTML Dashboard (v9)
# ---------------------------------------------------------------------
# ✅ Site + Pool + Date dropdowns
# ✅ Live search + auto-refresh every hour
# ✅ Per-host breakdown table + charts
# ✅ Supports historical index files (xenpool_index_*.csv)
# ---------------------------------------------------------------------

OUTPUT_DIR="/tmp/xenpool_collect_tmp"
HTML_FILE="${OUTPUT_DIR}/Citrix_XenServer_Dashboard_AllDates.html"

INDEX_FILES=$(ls -1t ${OUTPUT_DIR}/xenpool_index_*.csv 2>/dev/null)
[[ -z "$INDEX_FILES" ]] && { echo "❌ No xenpool_index_*.csv files found in $OUTPUT_DIR"; exit 1; }

echo "=============================================================="
echo " Citrix XenServer Dashboard v9 (All Dates)"
echo "=============================================================="
echo "Output file: $HTML_FILE"
echo "=============================================================="

# Generate file list for JS
ls -1t ${OUTPUT_DIR}/xenpool_index_*.csv > "${OUTPUT_DIR}/index_filelist.txt"

cat > "$HTML_FILE" <<'HTML_EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Citrix XenServer Dashboard (All Dates)</title>
<style>
body { font-family: Arial, sans-serif; background:#f5f8fc; color:#222; margin:24px; }
.container { max-width:1200px; margin:auto; background:#fff; padding:20px; border-radius:8px; box-shadow:0 4px 10px rgba(0,0,0,0.08);}
h1 { color:#005eb8; }
select, input[type=text] { padding:8px; margin:4px; border:1px solid #ccc; border-radius:5px; }
#timer { font-size:13px; color:#666; margin-left:auto; }
table { border-collapse:collapse; width:100%; margin-top:16px; }
th,td { border:1px solid #ddd; padding:8px; font-size:13px; }
th { background:#007bff; color:#fff; }
tr:nth-child(even){background:#f9f9f9;}
canvas { background:white; margin:10px; border-radius:8px; box-shadow:0 1px 4px rgba(0,0,0,0.1);}
.chart-container{display:flex;flex-wrap:wrap;gap:14px;}
.no-data{color:#777;padding:10px;}
</style>
</head>
<body>
<div class="container">
<h1>Citrix XenServer Unified Dashboard</h1>
<p id="timer">Next auto-refresh in 60:00 minutes</p>
<label><b>Select Date:</b></label>
<select id="dateSelect"><option value="">-- Select Date --</option></select>
<label><b>Select Site:</b></label>
<select id="siteSelect"><option value="">-- Select Site --</option></select>
<label><b>Select Pool:</b></label>
<select id="poolSelect"><option value="">-- Select Pool --</option></select>
<input type="text" id="searchBox" placeholder="Search site or pool..." />
<div id="reportArea"><div class="no-data">Select a date and site/pool to view report.</div></div>
</div>

<script>
const REFRESH_INTERVAL=3600000;let countdown=3600;
setInterval(()=>{countdown--;const m=String(Math.floor(countdown/60)).padStart(2,'0');const s=String(countdown%60).padStart(2,'0');
document.getElementById('timer').innerText="Next auto-refresh in "+m+":"+s+" minutes";},1000);
setTimeout(()=>location.reload(),REFRESH_INTERVAL);

function parseCSV(t){return t.split(/\\r?\\n/).filter(Boolean).map(l=>l.split(',').map(x=>x.trim()));}

async function loadIndexList(){
  const r=await fetch('index_filelist.txt?_='+Date.now()).catch(()=>null);
  if(!r||!r.ok)return[];
  return (await r.text()).split(/\\r?\\n/).filter(Boolean);
}

async function loadDataForDate(indexFile){
  const r=await fetch(indexFile+'?_='+Date.now()).catch(()=>null);
  if(!r||!r.ok)return[];
  const t=await r.text();const lines=parseCSV(t).filter(l=>l[0]&&l[0]!='POOL NAME');
  const data=[];
  for(const [pool_name,,csv_path] of lines){
    try{
      const ptxt=await fetch(csv_path+'?_='+Date.now()).then(r=>r.text());
      const arr=ptxt.split(/\\r?\\n/);
      const summary={};let inHost=false,inSum=false,inCap=false;const hosts=[];
      for(const l of arr){
        if(!l){inHost=inSum=inCap=false;continue;}
        if(l.startsWith('POOL NAME,HOST NAME')){inHost=true;continue;}
        if(l.startsWith('POOL SUMMARY')){inSum=true;continue;}
        if(l.startsWith('POOL CAPACITY SUMMARY')){inCap=true;continue;}
        const p=l.split(',').map(x=>x.trim());
        if(inHost&&p.length>=11){hosts.push({host:p[1],cpu:+p[2],ctrl:+p[3],used:+p[4],free:+p[5],total:+p[6],running:+p[7],vm32:+p[8],vm16a:+p[9],vm16r:+p[10]});}
        if(inSum){
          if(p[0].includes('Running VMs'))summary.vms=+p[1];
          if(p[0].includes('Usable Memory'))summary.mem_usable=+p[1];
          if(p[0].includes('16GB VM Capacity'))summary.vm_capacity=+p[1];
          if(p[0].match(/32GB VMs/i))summary.vm32=+p[1];
          if(p[0].match(/16GB ABCVDE/i))summary.vm16a=+p[1];
          if(p[0].match(/16GB ABCVDER/i))summary.vm16r=+p[1];
        }
        if(inCap){
          if(p[0].includes('CPU Cores'))summary.cpu=+p[1];
          if(p[0].includes('Memory Total'))summary.mem_total=+p[1];
          if(p[0].includes('Memory Used'))summary.mem_used=+p[1];
          if(p[0].includes('SR Total'))summary.sr_total=+p[1];
          if(p[0].includes('SR Used'))summary.sr_used=+p[1];
        }
      }
      const entry={...summary,hosts,date:indexFile.split('_').pop().replace('.csv',''),
        site:(pool_name.includes('_')?pool_name.split('_')[0]:'UNKNOWN'),
        pool:(pool_name.includes('_')?pool_name.split('_').slice(1).join('_'):pool_name),
        csv:csv_path};
      data.push(entry);
    }catch(e){}
  }
  return data;
}

function drawPie(ctx,pct,title,color){
  const a=(Math.min(100,Math.max(0,pct))/100)*2*Math.PI;
  ctx.clearRect(0,0,300,300);
  ctx.beginPath();ctx.moveTo(150,150);ctx.arc(150,150,100,0,a,false);ctx.fillStyle=color;ctx.fill();
  ctx.beginPath();ctx.moveTo(150,150);ctx.arc(150,150,100,a,2*Math.PI,false);ctx.fillStyle='#e5e5e5';ctx.fill();
  ctx.font='14px Arial';ctx.fillStyle='#000';ctx.textAlign='center';
  ctx.fillText(title+" ("+pct+"%)",150,180);
}

function populateDropdowns(data){
  const siteSel=document.getElementById('siteSelect');
  siteSel.innerHTML='<option value="">-- Select Site --</option>';
  [...new Set(data.map(d=>d.site))].sort().forEach(s=>{
    const o=document.createElement('option');o.value=s;o.textContent=s;siteSel.appendChild(o);
  });
}

function populatePools(data){
  const site=document.getElementById('siteSelect').value;
  const poolSel=document.getElementById('poolSelect');
  poolSel.innerHTML='<option value="">-- Select Pool --</option>';
  data.filter(d=>!site||d.site===site).forEach(p=>{
    const o=document.createElement('option');o.value=p.pool;o.textContent=p.pool;poolSel.appendChild(o);
  });
}

function showReport(data,site,pool){
  const entry=data.find(d=>(!site||d.site===site)&&(!pool||d.pool===pool));
  const area=document.getElementById('reportArea');
  if(!entry){area.innerHTML='<div class="no-data">No data for selection.</div>';return;}
  const memPct=((entry.mem_used/entry.mem_total)*100).toFixed(1);
  const srPct=((entry.sr_used/entry.sr_total)*100).toFixed(1);
  const vmPct=((entry.vms/entry.vm_capacity)*100).toFixed(1);
  let html=\`<h2>\${entry.site} | \${entry.pool} | <small>\${entry.date}</small></h2>
  <table><tr><th>Metric</th><th>Value</th></tr>
  <tr><td>CPU Cores</td><td>\${entry.cpu}</td></tr>
  <tr><td>Memory Total (GB)</td><td>\${entry.mem_total}</td></tr>
  <tr><td>Memory Used (GB)</td><td>\${entry.mem_used}</td></tr>
  <tr><td>SR Used (GB)</td><td>\${entry.sr_used}</td></tr>
  <tr><td>Total Running VMs</td><td>\${entry.vms}</td></tr>
  <tr><td>VM Capacity (16GB)</td><td>\${entry.vm_capacity}</td></tr>
  <tr><td>Total 32GB VMs</td><td>\${entry.vm32}</td></tr>
  <tr><td>Total 16GB ABCVDE VMs</td><td>\${entry.vm16a}</td></tr>
  <tr><td>Total 16GB ABCVDER VMs</td><td>\${entry.vm16r}</td></tr>
  <tr><td>CSV</td><td><a href="\${entry.csv}" target="_blank">Open CSV</a></td></tr></table>
  <div class='chart-container'>
    <canvas id='memChart' width='300' height='300'></canvas>
    <canvas id='srChart' width='300' height='300'></canvas>
    <canvas id='vmChart' width='300' height='300'></canvas>
  </div>\`;
  if(entry.hosts&&entry.hosts.length){
    html+=\`<h3>Host-wise Breakdown</h3><table>
    <tr><th>Host</th><th>CPU</th><th>Used</th><th>Free</th><th>Running</th><th>32GB</th><th>16GB ABCVDE</th><th>16GB ABCVDER</th></tr>\`;
    entry.hosts.forEach(h=>{
      html+=\`<tr><td>\${h.host}</td><td>\${h.cpu}</td><td>\${h.used}</td><td>\${h.free}</td>
      <td>\${h.running}</td><td>\${h.vm32}</td><td>\${h.vm16a}</td><td>\${h.vm16r}</td></tr>\`;
    });
    html+=\`</table>\`;
  }
  area.innerHTML=html;
  drawPie(document.getElementById('memChart').getContext('2d'),memPct,'Memory','#007bff');
  drawPie(document.getElementById('srChart').getContext('2d'),srPct,'Storage','#28a745');
  drawPie(document.getElementById('vmChart').getContext('2d'),vmPct,'VM Capacity','#ff9800');
}

(async()=>{
  const indexFiles=await loadIndexList();
  const dateSel=document.getElementById('dateSelect');
  indexFiles.forEach(f=>{
    const name=f.split('/').pop().replace('xenpool_index_','').replace('.csv','');
    const o=document.createElement('option');o.value=f;o.textContent=name;dateSel.appendChild(o);
  });
  let currentData=[];
  dateSel.addEventListener('change',async()=>{
    currentData=await loadDataForDate(dateSel.value);
    populateDropdowns(currentData);
    document.getElementById('reportArea').innerHTML='<div class="no-data">Select a site/pool.</div>';
  });
  siteSelect.addEventListener('change',()=>populatePools(currentData));
  poolSelect.addEventListener('change',()=>showReport(currentData,siteSelect.value,poolSelect.value));
  searchBox.addEventListener('keyup',e=>{
    const q=e.target.value.toLowerCase();
    const m=currentData.find(d=>d.site.toLowerCase().includes(q)||d.pool.toLowerCase().includes(q));
    if(m){siteSelect.value=m.site;populatePools(currentData);poolSelect.value=m.pool;showReport(currentData,m.site,m.pool);}
  });
})();
</script>
</body>
</html>
HTML_EOF

echo "✅ Dashboard v9 created: $HTML_FILE"
echo "👉 Open in your browser: file://$HTML_FILE"
echo "✅ It supports multiple historical index files."
