#!/bin/bash

# Check if the correct number of arguments is provided
if [ "$#" -ne 3 ]; then
    echo "Usage: $0 input_file output_file hostname_to_remove"
    exit 1
fi

# Get the input file, output file, and hostname to remove from the command line arguments
input_file="$1"
output_file="$2"
hostname_to_remove="$3"

# Check if the input file exists
if [ ! -f "$input_file" ]; then
    echo "Error: Input file '$input_file' does not exist."
    exit 1
fi

# Function to process the data
process_data() {
    local input="$1"
    local hostname_to_remove="$2"
    local output=""
    local block=""
    local in_block=0

    while IFS= read -r line; do
        if [[ "$line" == "Begin Limit" ]]; then
            block="Begin Limit\n"
            in_block=1
        elif [[ "$line" == "End Limit" ]]; then
            block+="End Limit\n"
            in_block=0
            # Process the block
            hostnames=$(echo -e "$block" | grep -oP 'HOST=\K.*')
            if [[ "$hostnames" == *"$hostname_to_remove"* ]]; then
                IFS=' ' read -r -a hosts_array <<< "$hostnames"
                if [[ ${#hosts_array[@]} -eq 1 ]]; then
                    # Skip the entire block
                    continue
                else
                    # Remove the matched hostname
                    new_hostnames=$(echo "$hostnames" | sed "s/$hostname_to_remove//" | tr -s ' ')
                    block=$(echo -e "$block" | sed "s/HOST=.*/HOST=$new_hostnames/")
                fi
            fi
            output+="$block"
        elif [[ $in_block -eq 1 ]]; then
            block+="$line\n"
        else
            output+="$line\n"
        fi
    done <<< "$input"

    echo -e "$output"
}

# Read the input file
input_data=$(<"$input_file")

# Process the data
processed_data=$(process_data "$input_data" "$hostname_to_remove")

# Write the processed data to the output file
echo "$processed_data" > "$output_file"

echo "Processing complete. Output written to '$output_file'."
