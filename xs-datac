#!/bin/bash
# ---------------------------------------------------------------------
# Citrix XenServer / Hypervisor Multi-Pool SSH Collector (final clean unified)
#  - One combined CSV with single headers per section:
#       1. HOST DETAILS (all pools)
#       2. NFS REPOSITORIES (all pools)
#       3. POOL SUMMARY (all pools)
#  - Sorted by pool name
#  - Deletes /tmp/xenpool_* from XenServers after collection
#  - Keeps original data collection logic 100% intact
# ---------------------------------------------------------------------

LOCKFILE="/tmp/xenpool_collect.lock"

if [ -e "$LOCKFILE" ] && kill -0 "$(cat "$LOCKFILE")" 2>/dev/null; then
  echo "Another xenpool_collect run is still in progress. Exiting safely."
  exit 0
fi
echo $$ > "$LOCKFILE"
trap 'rm -f "$LOCKFILE"' EXIT

# ---------------- Configuration ----------------
USER="root"
PASS=""
SSHPASS_BIN="/usr/bin/sshpass"
SERVER_LIST="/u/arghyaa/working-script/xs_report/servers.txt"
SSH_TIMEOUT=15
USE_SSH_KEY=false
TMP_DIR="/SCRATCH/report/xenpool_collect_tmp"
NET_SAMPLE_SEC=2
FINAL_CSV="$TMP_DIR/xenpool_all.csv"
# ------------------------------------------------

mkdir -p "$TMP_DIR"
> "$FINAL_CSV"

[[ ! -f "$SERVER_LIST" ]] && { echo "Error: $SERVER_LIST not found!"; exit 1; }

echo "=============================================================="
echo " Citrix XenServer Multi-Pool SSH Collector (Final Unified Clean)"
echo "=============================================================="
echo "Using server list: $SERVER_LIST"
echo "Output file: $FINAL_CSV"
echo "=============================================================="

# --- Remote collection script ---
read -r -d '' REMOTE_SCRIPT <<'EOF'
timestamp=$(date +"%Y-%m-%d_%H-%M")
csv_file="/tmp/xenpool_final_${timestamp}.csv"
pool_name=$(xe pool-list 2>/dev/null | awk -F: '/name-label \( RW\):/ {print $2}' | xargs)
[[ -z "$pool_name" ]] && pool_name="Standalone_Host"

# (Host header)
echo "#POOL NAME,HOST NAME,CPU,CPU_MODEL,DOM0_CPU,LOAD_AVG,CTRL_MEM(GB),USED_MEM(GB),FREE_MEM(GB),TOTAL_MEM(GB),RUNNING_VM,HYPERTHREADING,UPTIME_DAYS,CPU_UTIL(%),MEM_UTIL(%),NET_UTIL(%),SR NAME,SR TOTAL(GB),SR USED(GB),SR FREE(GB),SR TYPE" > "$csv_file"

# (Full host logic)
hosts=$(xe host-list --minimal | tr ',' ' ')
for uuid in $hosts; do
  host_name=$(xe host-param-get uuid=$uuid param-name=name-label)
  cpu=$(xe host-cpu-info host-uuid=$uuid --minimal)
  [[ -z "$cpu" || "$cpu" == "0" ]] && cpu=1
  cpu_model=$(xe host-cpu-info host-uuid=$uuid 2>/dev/null | awk -F: '/model name/{print $2;exit}' | xargs)
  [[ -z "$cpu_model" ]] && cpu_model=$(grep -m1 "model name" /proc/cpuinfo | cut -d: -f2- | xargs)
  dom0_cpu=$(xl vcpu-list | grep 'Domain-0' | wc -l)
  load_avg=$(awk '{print $1}' /proc/loadavg)
  mem_total_bytes=$(xe host-param-get uuid=$uuid param-name=memory-total)
  mem_free_bytes=$(xe host-param-get uuid=$uuid param-name=memory-free)
  ctrl_mem_mib=$(xl list Domain-0 | awk 'NR==2{print $3}')
  ctrl_mem_bytes=$((ctrl_mem_mib*1024*1024))
  mem_total_gb=$((mem_total_bytes/1024/1024/1024))
  mem_free_gb=$((mem_free_bytes/1024/1024/1024))
  ctrl_mem_gb=$((ctrl_mem_bytes/1024/1024/1024))
  mem_used_gb=$((mem_total_gb - mem_free_gb))
  vm_count=$(xe vm-list resident-on=$uuid power-state=running | grep -i "name-label" | grep -vi Control | wc -l)
  ht_state=$( [[ -f /sys/devices/system/cpu/smt/active ]] && { [[ $(cat /sys/devices/system/cpu/smt/active) == "1" ]] && echo "Enabled" || echo "Disabled"; } || echo "Unknown" )
  iface="bond0"; [[ ! -d /sys/class/net/$iface ]] && iface="eth0"; [[ ! -d /sys/class/net/$iface ]] && iface="eth1"
  rx1=$(cat /sys/class/net/$iface/statistics/rx_bytes 2>/dev/null || echo 0); tx1=$(cat /sys/class/net/$iface/statistics/tx_bytes 2>/dev/null || echo 0)
  sleep ${NET_SAMPLE_SEC}
  rx2=$(cat /sys/class/net/$iface/statistics/rx_bytes 2>/dev/null || echo 0); tx2=$(cat /sys/class/net/$iface/statistics/tx_bytes 2>/dev/null || echo 0)
  delta_bytes=$(( (rx2 - rx1) + (tx2 - tx1) ))
  iface_speed=$(cat /sys/class/net/$iface/speed 2>/dev/null || echo 0)
  net_util=$(awk -v b=$delta_bytes -v s=$NET_SAMPLE_SEC -v sp=$iface_speed 'BEGIN{if(sp>0)speedMB=sp/8;else speedMB=1;printf "%.1f",(b/(s*1024*1024))/speedMB*100}')
  cpu_util=$(awk -v la=$load_avg -v c=$cpu 'BEGIN{if(c>0)printf "%.1f",(la/c*100);else print "0"}')
  mem_util=$(awk -v u=$mem_used_gb -v t=$mem_total_gb 'BEGIN{if(t>0)printf "%.1f",(u/t*100);else print "0"}')
  echo "${pool_name},${host_name},${cpu},\"${cpu_model}\",${dom0_cpu},${load_avg},${ctrl_mem_gb},${mem_used_gb},${mem_free_gb},${mem_total_gb},${vm_count},${ht_state},NA,${cpu_util},${mem_util},${net_util},${host_name},0,0,0,local_storage" >> "$csv_file"
done

# NFS SR Section
echo "" >> "$csv_file"
echo "#NFS REPOSITORIES" >> "$csv_file"
echo "POOL NAME,TYPE,SR NAME,TOTAL(GB),USED(GB),FREE(GB)" >> "$csv_file"
for nfs_sr in $(xe sr-list type=nfs --minimal | tr ',' ' '); do
  [[ -z "$nfs_sr" ]] && continue
  sr_name_nfs=$(xe sr-param-get uuid=$nfs_sr param-name=name-label)
  sr_total=$(xe sr-param-get uuid=$nfs_sr param-name=physical-size)
  sr_used=$(xe sr-param-get uuid=$nfs_sr param-name=physical-utilisation)
  total_gb=$((sr_total/1024/1024/1024))
  used_gb=$((sr_used/1024/1024/1024))
  free_gb=$((total_gb - used_gb))
  echo "${pool_name},nfs,${sr_name_nfs},${total_gb},${used_gb},${free_gb}" >> "$csv_file"
done

# Pool Summary
echo "" >> "$csv_file"
echo "#POOL SUMMARY" >> "$csv_file"
echo "POOL NAME,CPU Cores,Memory Total (GB),Memory Used (GB),Memory Free (GB),Running VMs,16GB VM Capacity (Approx),32GB VM Capacity (Approx),CPU Utilization (%),Memory Utilization (%),Network Utilization (%)" >> "$csv_file"
total_cpu=$(xe host-cpu-list --minimal | tr ',' '\n' | wc -l)
mem_total_gb=$(xe host-param-get uuid=$uuid param-name=memory-total)
mem_total_gb=$((mem_total_gb/1024/1024/1024))
echo "${pool_name},${total_cpu},${mem_total_gb},NA,NA,NA,NA,NA,NA,NA,NA" >> "$csv_file"

mv "$csv_file" /tmp/xenpool_final_${timestamp}.csv
rm -f /tmp/xenpool_summary_* 2>/dev/null
echo "${pool_name},/tmp/xenpool_final_${timestamp}.csv"
EOF

# --- Consolidate into one file ---
HOST_TMP="$TMP_DIR/all_hosts.csv"
NFS_TMP="$TMP_DIR/all_nfs.csv"
POOL_TMP="$TMP_DIR/all_summary.csv"
> "$HOST_TMP"; > "$NFS_TMP"; > "$POOL_TMP"

for server in $(grep -v '^\s*#' "$SERVER_LIST" | sed '/^\s*$/d'); do
  echo "Collecting from $server ..."
  result=$($SSHPASS_BIN -p "$PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT "$USER@$server" "bash -s" <<< "$REMOTE_SCRIPT")
  pool_name=$(echo "$result" | awk -F',' '{print $1}')
  remote_csv=$(echo "$result" | awk -F',' '{print $2}')
  [[ -z "$pool_name" || -z "$remote_csv" ]] && continue
  local_csv="$TMP_DIR/${pool_name}.csv"
  $SSHPASS_BIN -p "$PASS" scp -o StrictHostKeyChecking=no "$USER@$server:$remote_csv" "$local_csv" >/dev/null 2>&1
  awk '/^#POOL NAME/{flag=1;next}/^#NFS REPOSITORIES/{flag=0}flag' "$local_csv" >> "$HOST_TMP"
  awk '/^#NFS REPOSITORIES/{flag=1;next}/^#POOL SUMMARY/{flag=0}flag' "$local_csv" >> "$NFS_TMP"
  awk '/^#POOL SUMMARY/{flag=1;next}flag' "$local_csv" >> "$POOL_TMP"
  $SSHPASS_BIN -p "$PASS" ssh -o StrictHostKeyChecking=no "$USER@$server" "rm -f /tmp/xenpool_*" >/dev/null 2>&1
done

# --- Write final structured CSV ---
{
  echo "#HOST DETAILS"
  head -n 1 "$HOST_TMP"
  sort -t, -k1,1 "$HOST_TMP"
  echo ""
  echo "#NFS REPOSITORIES"
  head -n 1 "$NFS_TMP"
  sort -t, -k1,1 "$NFS_TMP"
  echo ""
  echo "#POOL SUMMARY"
  head -n 1 "$POOL_TMP"
  sort -t, -k1,1 "$POOL_TMP"
} > "$FINAL_CSV"

echo "âœ… Final unified CSV ready: $FINAL_CSV"
rm -f "$LOCKFILE"
exit 0
