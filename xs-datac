#!/bin/bash
# ---------------------------------------------------------------------
# Citrix XenServer / Hypervisor Multi-Pool SSH Collector (final unified)
# Version: single output, safe overwrite (no timestamp, no index)
# ---------------------------------------------------------------------

LOCKFILE="/tmp/xenpool_collect.lock"

# Prevent overlapping runs
if [ -e "$LOCKFILE" ] && kill -0 "$(cat "$LOCKFILE")" 2>/dev/null; then
  echo "Another xenpool_collect run is still in progress. Exiting safely."
  exit 0
fi

# Create lockfile and ensure it's removed on exit
echo $$ > "$LOCKFILE"
trap 'rm -f "$LOCKFILE"' EXIT

# ---------------- Configuration ----------------
USER="root"
PASS=""
SSHPASS_BIN="/usr/bin/sshpass"
SERVER_LIST="/u/arghyaa/working-script/xs_report/servers.txt"
SSH_TIMEOUT=15
USE_SSH_KEY=false
TMP_DIR="/SCRATCH/report/xenpool_collect_tmp"
NET_SAMPLE_SEC=2
FINAL_CSV="$TMP_DIR/xenpool_all.csv"
TEMP_CSV="$TMP_DIR/xenpool_all_new.csv"
# ------------------------------------------------

mkdir -p "$TMP_DIR"
> "$TEMP_CSV"

[[ ! -f "$SERVER_LIST" ]] && { echo "Error: $SERVER_LIST not found!"; exit 1; }

echo "=============================================================="
echo " Citrix XenServer Multi-Pool SSH Collector (Unified Output)"
echo "=============================================================="
echo "Using server list: $SERVER_LIST"
echo "Reports directory: $TMP_DIR"
echo "NET_SAMPLE_SEC: $NET_SAMPLE_SEC"
echo "Combined CSV (final): $FINAL_CSV"
echo "=============================================================="

# --- Remote Script (unchanged logic) ---
read -r -d '' REMOTE_SCRIPT <<'EOF'
timestamp=$(date +"%Y-%m-%d_%H-%M")
csv_file="/tmp/xenpool_summary_${timestamp}.csv"

pool_name=$(xe pool-list 2>/dev/null | awk -F: '/name-label \( RW\):/ {print $2}' | xargs)
[[ -z "$pool_name" ]] && pool_name="Standalone_Host"

total_cpu=0
total_mem_total=0
total_mem_usable=0
total_mem_used=0
total_mem_free=0
total_ctrl_mem=0
total_vms=0

sum_cpu_util=0
sum_mem_util=0
sum_net_util=0
host_util_count=0

hosts=$(xe host-list --minimal 2>/dev/null | tr ',' ' ')
[[ -z "$hosts" ]] && { echo "No hosts found."; exit 1; }

echo "#POOL NAME,HOST NAME,CPU,CPU_MODEL,DOM0_CPU,LOAD_AVG,CTRL_MEM(GB),USED_MEM(GB),FREE_MEM(GB),TOTAL_MEM(GB),RUNNING_VM,HYPERTHREADING,UPTIME_DAYS,ETH0_STATUS,ETH0_SPEED,ETH0_MAC,ETH1_STATUS,ETH1_SPEED,ETH1_MAC,BOND0_STATUS,BOND0_SPEED,CPU_UTIL(%),MEM_UTIL(%),NET_UTIL(%),SR NAME,SR TOTAL(GB),SR USED(GB),SR FREE(GB),SR TYPE" > "$csv_file"

declare -A SR_NAME SR_TYPE SR_TOTAL SR_USED SR_FREE
for sr_uuid in $(xe sr-list --minimal 2>/dev/null | tr ',' ' '); do
  sr_name_full=$(xe sr-param-get uuid="$sr_uuid" param-name=name-label 2>/dev/null)
  sr_type_full=$(xe sr-param-get uuid="$sr_uuid" param-name=type 2>/dev/null)
  [[ "$sr_type_full" == "iso" || "$sr_type_full" == "udev" || -z "$sr_name_full" ]] && continue
  sr_total=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-size 2>/dev/null)
  sr_used=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-utilisation 2>/dev/null)
  [[ -z "$sr_total" || "$sr_total" -eq 0 ]] && continue
  SR_NAME["$sr_uuid"]="$sr_name_full"
  SR_TYPE["$sr_uuid"]="$sr_type_full"
  SR_TOTAL["$sr_uuid"]=$((sr_total/1024/1024/1024))
  SR_USED["$sr_uuid"]=$((sr_used/1024/1024/1024))
  SR_FREE["$sr_uuid"]=$(( SR_TOTAL["$sr_uuid"] - SR_USED["$sr_uuid"] ))
done

select_iface() {
  if [[ -d /sys/class/net/bond0 ]]; then
    echo "bond0"
  elif [[ -d /sys/class/net/eth0 ]]; then
    echo "eth0"
  elif [[ -d /sys/class/net/eth1 ]]; then
    echo "eth1"
  else
    echo ""
  fi
}

for uuid in $hosts; do
  host_name=$(xe host-param-get uuid="$uuid" param-name=name-label 2>/dev/null)
  host_name=${host_name:-$uuid}
  cpu=$(xe host-cpu-info host-uuid="$uuid" --minimal 2>/dev/null)
  [[ -z "$cpu" || "$cpu" == "0" ]] && cpu=1

  cpu_model=$(xe host-cpu-info host-uuid="$uuid" 2>/dev/null | awk -F: '/model name/ { $1=""; gsub(/^ +| +$/,"",$0); print substr($0,2); exit }')
  [[ -z "$cpu_model" ]] && cpu_model=$(grep -m1 "model name" /proc/cpuinfo | cut -d: -f2- | xargs)
  cpu_model=${cpu_model:-"Unknown"}

  dom0_cpu=$(xl vcpu-list | grep 'Domain-0' | wc -l)
  dom0_cpu=${dom0_cpu:-"NA"}

  load_avg=$(awk '{print $1}' /proc/loadavg)
  load_avg=${load_avg:-"0"}

  mem_total_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-total)
  mem_free_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-free)
  ctrl_mem_mib=$(xl list Domain-0 | awk 'NR==2 {print $3}')
  [[ -z "$ctrl_mem_mib" ]] && ctrl_mem_mib=0
  ctrl_mem_bytes=$((ctrl_mem_mib * 1024 * 1024))

  mem_total_gb=$((mem_total_bytes/1024/1024/1024))
  mem_free_gb=$((mem_free_bytes/1024/1024/1024))
  ctrl_mem_gb=$((ctrl_mem_bytes/1024/1024/1024))
  mem_used_gb=$((mem_total_gb - mem_free_gb))
  usable_mem_gb=$((mem_total_gb - ctrl_mem_gb))

  vm_count=$(xe vm-list resident-on="$uuid" power-state=running | grep -i "name-label" | grep -vi "Control" | wc -l)

  if [[ -f /sys/devices/system/cpu/smt/active ]]; then
    smt_status=$(cat /sys/devices/system/cpu/smt/active)
    [[ "$smt_status" == "1" ]] && ht_state="Enabled" || ht_state="Disabled"
  else
    ht_state="Unknown"
  fi

  uptime_days=$(awk '{print int($1/86400)}' /proc/uptime)

  get_status() { [[ -f /sys/class/net/$1/carrier ]] && grep -q 1 /sys/class/net/$1/carrier && echo "UP" || echo "DOWN"; }
  get_speed_val() { [[ -f /sys/class/net/$1/speed ]] && cat /sys/class/net/$1/speed || echo "NA"; }
  get_mac() { [[ -f /sys/class/net/$1/address ]] && cat /sys/class/net/$1/address; }

  eth0_status=$(get_status eth0)
  eth0_speed=$(get_speed_val eth0)
  eth0_mac=$(get_mac eth0)
  eth1_status=$(get_status eth1)
  eth1_speed=$(get_speed_val eth1)
  eth1_mac=$(get_mac eth1)
  bond0_status=$(get_status bond0)
  bond0_speed=$(get_speed_val bond0)

  iface=$(select_iface)
  net_util_percent=0
  if [[ -n "$iface" && -f /sys/class/net/$iface/statistics/rx_bytes ]]; then
    rx1=$(cat /sys/class/net/$iface/statistics/rx_bytes)
    tx1=$(cat /sys/class/net/$iface/statistics/tx_bytes)
    sleep ${NET_SAMPLE_SEC}
    rx2=$(cat /sys/class/net/$iface/statistics/rx_bytes)
    tx2=$(cat /sys/class/net/$iface/statistics/tx_bytes)
    delta_bytes=$(( (rx2 - rx1) + (tx2 - tx1) ))
    mb_per_sec=$(awk -v d="$delta_bytes" -v s="$NET_SAMPLE_SEC" 'BEGIN{ if(s>0) printf "%.6f", (d/(s*1024*1024)); else print "0"}')
    iface_speed_mbps=$(get_speed_val "$iface")
    if [[ "$iface_speed_mbps" =~ ^[0-9]+$ && "$iface_speed_mbps" -gt 0 ]]; then
      iface_speed_mb_per_sec=$(awk -v m="$iface_speed_mbps" 'BEGIN{printf "%.6f", (m/8)}')
      net_util_percent=$(awk -v a="$mb_per_sec" -v b="$iface_speed_mb_per_sec" 'BEGIN{ if(b>0) printf "%.1f", (a/b*100); else print "0.0"}')
      net_util_percent=$(awk -v n="$net_util_percent" 'BEGIN{ if(n>100) print "100.0"; else print n}')
    fi
  fi

  sr_total_gb=0; sr_used_gb=0; sr_free_gb=0
  for sr_uuid in "${!SR_NAME[@]}"; do
    sr_nm="${SR_NAME[$sr_uuid]}"
    sr_type="${SR_TYPE[$sr_uuid]}"
    if [[ "$sr_type" == "lvm" || "$sr_type" == "ext" ]]; then
      if echo "$sr_nm" | tr '[:upper:]' '[:lower:]' | grep -qi "$(echo "$host_name" | tr '[:upper:]' '[:lower:]')"; then
        sr_total_gb=$((sr_total_gb + SR_TOTAL[$sr_uuid]))
        sr_used_gb=$((sr_used_gb + SR_USED[$sr_uuid]))
        sr_free_gb=$((sr_free_gb + SR_FREE[$sr_uuid]))
      fi
    fi
  done
  sr_name="${host_name}"
  sr_type="local_storage"

  cpu_util_percent=$(awk -v la="$load_avg" -v cores="$cpu" 'BEGIN{ if(cores>0) printf "%.1f", (la/cores*100); else print "0.0"}')
  cpu_util_percent=$(awk -v v="$cpu_util_percent" 'BEGIN{ if(v>100) print "100.0"; else printf "%.1f", v}')
  mem_util_percent=$(awk -v u="$mem_used_gb" -v t="$mem_total_gb" 'BEGIN{ if(t>0) printf "%.1f", (u/t*100); else print "0.0"}')

  sum_cpu_util=$(awk -v a="$sum_cpu_util" -v b="$cpu_util_percent" 'BEGIN{printf "%.6f", a+b}')
  sum_mem_util=$(awk -v a="$sum_mem_util" -v b="$mem_util_percent" 'BEGIN{printf "%.6f", a+b}')
  sum_net_util=$(awk -v a="$sum_net_util" -v b="$net_util_percent" 'BEGIN{printf "%.6f", a+b}')
  host_util_count=$((host_util_count+1))

  echo "poolhost,${pool_name},${host_name},${cpu},\"${cpu_model}\",${dom0_cpu},${load_avg},${ctrl_mem_gb},${mem_used_gb},${mem_free_gb},${mem_total_gb},${vm_count},${ht_state},${uptime_days},${eth0_status},${eth0_speed},${eth0_mac},${eth1_status},${eth1_speed},${eth1_mac},${bond0_status},${bond0_speed},${cpu_util_percent},${mem_util_percent},${net_util_percent},${sr_name},${sr_total_gb},${sr_used_gb},${sr_free_gb},${sr_type}" >> "$csv_file"

  total_cpu=$((total_cpu + cpu))
  total_mem_total=$((total_mem_total + mem_total_gb))
  total_mem_usable=$((total_mem_usable + usable_mem_gb))
  total_mem_used=$((total_mem_used + mem_used_gb))
  total_mem_free=$((total_mem_free + mem_free_gb))
  total_ctrl_mem=$((total_ctrl_mem + ctrl_mem_gb))
  total_vms=$((total_vms + vm_count))
done

avg_cpu_util=$(awk -v s="$sum_cpu_util" -v c="$host_util_count" 'BEGIN{ if(c>0) printf "%.1f", s/c; else print "0.0"}')
avg_mem_util=$(awk -v s="$sum_mem_util" -v c="$host_util_count" 'BEGIN{ if(c>0) printf "%.1f", s/c; else print "0.0"}')
avg_net_util=$(awk -v s="$sum_net_util" -v c="$host_util_count" 'BEGIN{ if(c>0) printf "%.1f", s/c; else print "0.0"}')

total_sr_total=0; total_sr_used=0
for sr_uuid in "${!SR_TOTAL[@]}"; do
  total_sr_total=$((total_sr_total + SR_TOTAL[$sr_uuid]))
  total_sr_used=$((total_sr_used + SR_USED[$sr_uuid]))
done
total_sr_free=$((total_sr_total - total_sr_used))

{
  echo ""
  echo "#POOL SUMMARY"
  echo "#CPU Cores,Memory Total (GB),Memory Used (GB),Memory Free (GB),Usable Memory (GB),SR Used (GB),SR Free (GB),Running VMs,CPU Utilization (%),Memory Utilization (%),Network Utilization (%)"
  echo "summary,${total_cpu},${total_mem_total},${total_mem_used},${total_mem_free},${total_mem_usable},${total_sr_used},${total_sr_free},${total_vms},${avg_cpu_util},${avg_mem_util},${avg_net_util}"
} >> "$csv_file"

echo "${pool_name},${csv_file}"
EOF

# --- Loop over pool masters ---
success_count=0
total_count=0

for server in $(grep -v '^\s*#' "$SERVER_LIST" | sed '/^\s*$/d'); do
  ((total_count++))
  echo "------------------------------------------------------------------"
  echo "Connecting to $server ..."
  if [[ "$USE_SSH_KEY" == true ]]; then
    result=$(ssh -o ConnectTimeout=$SSH_TIMEOUT "$USER@$server" "bash -s" <<< "$REMOTE_SCRIPT" 2>/dev/null)
  else
    result=$($SSHPASS_BIN -p "$PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT "$USER@$server" "bash -s" <<< "$REMOTE_SCRIPT" 2>/dev/null)
  fi

  pool_name=$(echo "$result" | awk -F',' '{print $1}')
  remote_csv=$(echo "$result" | awk -F',' '{print $2}')

  if [[ -z "$pool_name" || -z "$remote_csv" ]]; then
    echo "Failed to collect data from $server"
    continue
  fi

  local_csv="${TMP_DIR}/${pool_name}.csv"
  $SSHPASS_BIN -p "$PASS" scp -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT "$USER@$server:$remote_csv" "$local_csv" >/dev/null 2>&1

  if [[ -f "$local_csv" ]]; then
    ((success_count++))
    echo "Appending pool [$pool_name] data..."
    {
      echo ""
      echo "##################################################################"
      echo "# POOL: ${pool_name} (${server})"
      echo "##################################################################"
      cat "$local_csv"
    } >> "$TEMP_CSV"
  else
    echo "Failed to retrieve CSV from $server"
  fi
done

# Safe overwrite: only replace old report if all pools succeeded
if [[ $success_count -eq $total_count && $total_count -gt 0 ]]; then
  mv -f "$TEMP_CSV" "$FINAL_CSV"
  echo "✅ All pools collected successfully."
  echo "Final combined report saved to: $FINAL_CSV"
else
  echo "⚠️  Not all pools succeeded ($success_count of $total_count)."
  echo "Keeping previous report: $FINAL_CSV"
  rm -f "$TEMP_CSV"
fi

echo "------------------------------------------------------------------"
echo " All Pool Reports Completed"
echo "------------------------------------------------------------------"

rm -f "$LOCKFILE" 2>/dev/null || true
exit 0
