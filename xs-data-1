#!/bin/bash
# ---------------------------------------------------------------------
# Citrix XenServer / Hypervisor Multi-Pool SSH Collector (v1.2)
# ---------------------------------------------------------------------
# âœ… Adds per-host Hyperthreading detection
# âœ… Adds VM 32GB, 16GB ABCvDE, and 16GB ABCvDER counts
# âœ… Fixes false-positive VM count bug
# âœ… Auto-generates index_filelist.txt
# âœ… Preserves all original logic
# ---------------------------------------------------------------------

USER="root"
PASS="justD0it!"
SERVER_LIST="servers.txt"
SSH_TIMEOUT=15
USE_SSH_KEY=false
TMP_DIR="/u/arghyaa/working-script/xs_report/xenpool_collect_tmp"
DATESTAMP=$(date +%Y-%m-%d_%H-%M)
MASTER_INDEX="${TMP_DIR}/xenpool_index_${DATESTAMP}.csv"

mkdir -p "$TMP_DIR"
> "$MASTER_INDEX"

[[ ! -f "$SERVER_LIST" ]] && { echo "Error: $SERVER_LIST not found!"; exit 1; }

echo "=============================================================="
echo " Citrix XenServer Multi-Pool SSH Collector (v1.2)"
echo "=============================================================="
echo "Using server list: $SERVER_LIST"
echo "Reports directory: $TMP_DIR"
echo "=============================================================="

# --- Remote Script (runs inside each XenServer) ---
read -r -d '' REMOTE_SCRIPT <<'EOF'
#!/bin/bash
timestamp=$(date +"%Y-%m-%d_%H-%M")
csv_file="/tmp/xenpool_summary_${timestamp}.csv"

pool_name=$(xe pool-list | grep "name-label ( RW):" | awk '{print $4}')
[[ -z "$pool_name" ]] && pool_name="Standalone_Host"

total_cpu=0
total_mem_total=0
total_mem_usable=0
total_mem_used=0
total_mem_free=0
total_ctrl_mem=0
total_vms=0

hosts=$(xe host-list --minimal | tr ',' ' ')
[[ -z "$hosts" ]] && { echo "No hosts found."; exit 1; }

echo "POOL NAME,HOST NAME,CPU,CTRL_MEM(GB),USED(GB),FREE(GB),TOTAL(GB),RUNNING_VM,HT_STATUS,VM_32GB_COUNT,VM_16GB_ABCvDE_COUNT,VM_16GB_ABCvDER_COUNT" > "$csv_file"

for uuid in $hosts; do
  host_name=$(xe host-param-get uuid="$uuid" param-name=name-label)
  cpu=$(xe host-cpu-info host-uuid="$uuid" --minimal)
  [[ -z "$cpu" ]] && cpu=0

  # --- Hyperthreading Status ---
  ht_threads=$(xl info | awk '/threads_per_core/ {print $3}' | head -n1)
  if [[ -z "$ht_threads" ]]; then
    ht_status="Unknown"
  elif [[ "$ht_threads" -gt 1 ]]; then
    ht_status="Enabled"
  else
    ht_status="Disabled"
  fi

  # --- Memory Metrics ---
  mem_total_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-total)
  mem_free_bytes=$(xe host-param-get uuid="$uuid" param-name=memory-free)
  ctrl_mem_mib=$(xl list Domain-0 2>/dev/null | awk 'NR==2 {print $3}')
  [[ -z "$ctrl_mem_mib" ]] && ctrl_mem_mib=0
  ctrl_mem_bytes=$((ctrl_mem_mib * 1024 * 1024))

  mem_total_gb=$((mem_total_bytes/1024/1024/1024))
  mem_free_gb=$((mem_free_bytes/1024/1024/1024))
  ctrl_mem_gb=$((ctrl_mem_bytes/1024/1024/1024))
  mem_used_gb=$((mem_total_gb - mem_free_gb))
  usable_mem_gb=$((mem_total_gb - ctrl_mem_gb))
  [[ $mem_used_gb -lt 0 ]] && mem_used_gb=0

  # --- Running VM Count ---
  vm_count=$(xe vm-list resident-on="$uuid" power-state=running | grep "name-label" | grep -vi "Control" | wc -l)

  # --- VM Memory Classification ---
  vm_32gb_count=0
  vm_16_abcvde_count=0
  vm_16_abcvder_count=0
  tmp_vm_file="/tmp/vm_mem_${host_name}.txt"
  > "$tmp_vm_file"

  for vm_uuid in $(xe vm-list resident-on="$uuid" power-state=running --minimal | tr ',' ' '); do
    [[ -z "$vm_uuid" ]] && continue
    vm_name=$(xe vm-param-get uuid="$vm_uuid" param-name=name-label 2>/dev/null)
    mem_bytes=$(xe vm-param-get uuid="$vm_uuid" param-name=memory-static-max 2>/dev/null)
    if [[ -n "$mem_bytes" && "$mem_bytes" =~ ^[0-9]+$ ]]; then
      echo "$vm_name,$mem_bytes" >> "$tmp_vm_file"
    fi
  done

  if [[ -s "$tmp_vm_file" ]]; then
    while IFS=',' read -r vm_name mem_bytes; do
      [[ -z "$vm_name" || -z "$mem_bytes" ]] && continue
      mem_gb=$((mem_bytes / 1024 / 1024 / 1024))
      # Ignore anything below 1GB or unrealistically high
      if (( mem_gb < 1 || mem_gb > 1024 )); then
        continue
      fi
      if (( mem_gb == 32 )); then
        ((vm_32gb_count++))
      elif (( mem_gb == 16 )); then
        if echo "$vm_name" | grep -qi "ABCvDER"; then
          ((vm_16_abcvder_count++))
        elif echo "$vm_name" | grep -qi "ABCvDE" && ! echo "$vm_name" | grep -qi "ABCvDER"; then
          ((vm_16_abcvde_count++))
        fi
      fi
    done < "$tmp_vm_file"
  fi
  rm -f "$tmp_vm_file"

  # --- Append Host Info to CSV ---
  echo "$pool_name,$host_name,$cpu,$ctrl_mem_gb,$mem_used_gb,$mem_free_gb,$usable_mem_gb,$vm_count,$ht_status,$vm_32gb_count,$vm_16_abcvde_count,$vm_16_abcvder_count" >> "$csv_file"

  # --- Pool Totals ---
  total_cpu=$((total_cpu + cpu))
  total_mem_total=$((total_mem_total + mem_total_gb))
  total_mem_usable=$((total_mem_usable + usable_mem_gb))
  total_mem_used=$((total_mem_used + mem_used_gb))
  total_mem_free=$((total_mem_free + mem_free_gb))
  total_ctrl_mem=$((total_ctrl_mem + ctrl_mem_gb))
  total_vms=$((total_vms + vm_count))
done

usable_mem_pool=$((total_mem_usable - total_ctrl_mem))
total_16gb_vm_cap=$((usable_mem_pool / 16))

# --- Pool Summary ---
{
  echo ""
  echo "POOL SUMMARY"
  echo "Total Running VMs,$total_vms"
  echo "Usable Memory (GB),$usable_mem_pool"
  echo "16GB VM Capacity (Approx),$total_16gb_vm_cap"
} >> "$csv_file"

# --- Storage Repository Section ---
{
  echo ""
  echo "STORAGE REPOSITORIES"
  echo "SR NAME,TOTAL(GB),USED(GB),FREE(GB),TYPE"
} >> "$csv_file"

total_sr_used=0
total_sr_total=0
for sr_uuid in $(xe sr-list --minimal | tr ',' ' '); do
  sr_name=$(xe sr-param-get uuid="$sr_uuid" param-name=name-label)
  sr_total=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-size)
  sr_used=$(xe sr-param-get uuid="$sr_uuid" param-name=physical-utilisation)
  sr_type=$(xe sr-param-get uuid="$sr_uuid" param-name=type)
  if [[ "$sr_type" == "iso" ]] || [[ "$sr_type" == "udev" ]] || [[ "$sr_total" -eq 0 ]]; then
    continue
  fi
  total_gb=$((sr_total/1024/1024/1024))
  used_gb=$((sr_used/1024/1024/1024))
  free_gb=$((total_gb - used_gb))
  echo "$sr_name,$total_gb,$used_gb,$free_gb,$sr_type" >> "$csv_file"
  total_sr_total=$((total_sr_total + total_gb))
  total_sr_used=$((total_sr_used + used_gb))
done
total_sr_free=$((total_sr_total - total_sr_used))

# --- Final Pool Capacity Summary ---
{
  echo ""
  echo "POOL CAPACITY SUMMARY"
  echo "Metric,Total(GB)"
  echo "CPU Cores,$total_cpu"
  echo "Memory Total,$total_mem_total"
  echo "Memory Used,$total_mem_used"
  echo "Memory Free,$total_mem_free"
  echo "Usable Memory,$usable_mem_pool"
  echo "SR Total,$total_sr_total"
  echo "SR Used,$total_sr_used"
  echo "SR Free,$total_sr_free"
  echo "Running VMs,$total_vms"
} >> "$csv_file"

echo "$pool_name,$csv_file"
EOF

# --- Collect from all servers ---
for server in $(grep -v '^#' "$SERVER_LIST" | xargs); do
  echo "------------------------------------------------------------------"
  echo "Connecting to $server ..."

  if [[ "$USE_SSH_KEY" == true ]]; then
    result=$(ssh -o ConnectTimeout=$SSH_TIMEOUT $USER@$server "bash -s" <<< "$REMOTE_SCRIPT" 2>/dev/null)
  else
    result=$(sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT $USER@$server "bash -s" <<< "$REMOTE_SCRIPT" 2>/dev/null)
  fi

  pool_name=$(echo "$result" | awk -F',' '{print $1}')
  remote_csv=$(echo "$result" | awk -F',' '{print $2}')
  if [[ -z "$pool_name" || -z "$remote_csv" ]]; then
    echo "Failed to collect data from $server"
    continue
  fi

  clean_pool=$(echo "$pool_name" | tr -dc 'A-Za-z0-9_-')
  local_csv="${TMP_DIR}/${clean_pool}_${DATESTAMP}.csv"

  echo "Fetching pool [$pool_name] CSV from $server ..."
  if [[ "$USE_SSH_KEY" == true ]]; then
    scp -o ConnectTimeout=$SSH_TIMEOUT $USER@$server:"$remote_csv" "$local_csv" >/dev/null 2>&1
  else
    sshpass -p "$PASS" scp -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT $USER@$server:"$remote_csv" "$local_csv" >/dev/null 2>&1
  fi

  if [[ -f "$local_csv" ]]; then
    echo "Pool [$pool_name] data saved to: $local_csv"
    echo "$pool_name,$server,$local_csv" >> "$MASTER_INDEX"
    sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$SSH_TIMEOUT $USER@$server "rm -f /tmp/xenpool_summary_*.csv /tmp/vm_mem_*.txt" >/dev/null 2>&1
  else
    echo "Failed to retrieve CSV from $server"
  fi
done

# --- Generate index_filelist.txt ---
echo ""
echo "Generating index_filelist.txt ..."
ls -1 ${TMP_DIR}/xenpool_index_*.csv 2>/dev/null | sort > "${TMP_DIR}/index_filelist.txt"
echo "âœ… Index file created at: ${TMP_DIR}/index_filelist.txt"

echo "------------------------------------------------------------------"
echo "âœ… All Pool Reports Collected"
echo "ðŸ“˜ Master Index: $MASTER_INDEX"
echo "------------------------------------------------------------------"
