import requests
import json
import pandas as pd
import logging
from datetime import datetime

# -------------------------------
# CONFIG (Update these)
# -------------------------------
JFROG_URL = "https://your-jfrog-instance.jfrog.io"
API_KEY = "YOUR_API_KEY"

HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

LOG_FILE = "fetch_report.log"

# -------------------------------
# LOGGING SETUP
# -------------------------------
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# -------------------------------
# HELPER FUNCTIONS
# -------------------------------
def safe_request(url):
    """Wrapper for GET request with error handling"""
    try:
        r = requests.get(url, headers=HEADERS, timeout=30)
        r.raise_for_status()
        return r.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"Request failed for {url}: {e}")
        return None

def get_projects():
    url = f"{JFROG_URL}/access/api/v1/projects"
    data = safe_request(url)
    if data and isinstance(data, dict):
        return data.get("projects", [])
    return []

def get_project_permissions(project_key):
    url = f"{JFROG_URL}/access/api/v1/projects/{project_key}/permissions"
    data = safe_request(url)
    if data and isinstance(data, list):
        return data
    return []

def get_repo_permissions():
    url = f"{JFROG_URL}/access/api/v2/permissions"
    data = safe_request(url)
    if data and isinstance(data, dict):
        return data.get("permissions", [])
    return []

# -------------------------------
# MAIN
# -------------------------------
def main():
    results = []

    # Project-level
    projects = get_projects()
    if not projects:
        logging.warning("No projects found or API failed.")

    for p in projects:
        pk = p.get("project_key")
        if not pk:
            continue
        perms = get_project_permissions(pk)
        if not perms:
            logging.warning(f"No permissions found for project {pk}.")
        for perm in perms:
            groups = perm.get("principals", {}).get("groups", {})
            for group, actions in groups.items():
                results.append({
                    "type": "project",
                    "project": pk,
                    "permission_name": perm.get("name", ""),
                    "repositories": ",".join(perm.get("repositories", [])),
                    "ad_group": group,
                    "actions": ",".join(actions)
                })

    # Repo-level
    repo_perms = get_repo_permissions()
    if not repo_perms:
        logging.warning("No repository permissions found or API failed.")

    for perm in repo_perms:
        groups = perm.get("principals", {}).get("groups", {})
        for group, actions in groups.items():
            results.append({
                "type": "repository",
                "project": "",
                "permission_name": perm.get("name", ""),
                "repositories": ",".join(perm.get("resources", {}).get("repositories", [])),
                "ad_group": group,
                "actions": ",".join(actions)
            })

    # Save results
    try:
        with open("jfrog_permissions.json", "w") as f:
            json.dump(results, f, indent=2)

        pd.DataFrame(results).to_csv("jfrog_permissions.csv", index=False)

        logging.info(f"Report generated successfully with {len(results)} entries.")
        print("✅ Report generated: jfrog_permissions.json & jfrog_permissions.csv")
    except Exception as e:
        logging.error(f"Failed to save report: {e}")
        print("❌ Failed to save report. Check logs.")

if __name__ == "__main__":
    logging.info("==== Fetch run started ====")
    main()
    logging.info("==== Fetch run completed ====")
